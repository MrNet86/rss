/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vnpt.portlet.user.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vnpt.portlet.user.model.ActIdInfo;
import com.vnpt.portlet.user.model.ActIdInfoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ActIdInfo service. Represents a row in the &quot;act_id_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vnpt.portlet.user.model.ActIdInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActIdInfoImpl}.
 * </p>
 *
 * @author ToanNQ86
 * @see ActIdInfoImpl
 * @see com.vnpt.portlet.user.model.ActIdInfo
 * @see com.vnpt.portlet.user.model.ActIdInfoModel
 * @generated
 */
public class ActIdInfoModelImpl extends BaseModelImpl<ActIdInfo>
	implements ActIdInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a act ID info model instance should use the {@link com.vnpt.portlet.user.model.ActIdInfo} interface instead.
	 */
	public static final String TABLE_NAME = "act_id_info";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "rev_", Types.BIGINT },
			{ "user_id_", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "key_", Types.VARCHAR },
			{ "value_", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "parent_id_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table act_id_info (id_ LONG not null primary key,rev_ LONG,user_id_ VARCHAR(75) null,type_ VARCHAR(75) null,key_ VARCHAR(75) null,value_ VARCHAR(75) null,password_ VARCHAR(75) null,parent_id_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table act_id_info";
	public static final String ORDER_BY_JPQL = " ORDER BY actIdInfo.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY act_id_info.id_ ASC";
	public static final String DATA_SOURCE = "activityDataSource";
	public static final String SESSION_FACTORY = "activitySessionFactory";
	public static final String TX_MANAGER = "activityTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vnpt.portlet.user.model.ActIdInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vnpt.portlet.user.model.ActIdInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vnpt.portlet.user.model.ActIdInfo"));

	public ActIdInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActIdInfo.class;
	}

	@Override
	public String getModelClassName() {
		return ActIdInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("rev", getRev());
		attributes.put("userId", getUserId());
		attributes.put("type", getType());
		attributes.put("key", getKey());
		attributes.put("value", getValue());
		attributes.put("password", getPassword());
		attributes.put("parent_id_", getParent_id_());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long rev = (Long)attributes.get("rev");

		if (rev != null) {
			setRev(rev);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		String parent_id_ = (String)attributes.get("parent_id_");

		if (parent_id_ != null) {
			setParent_id_(parent_id_);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getRev() {
		return _rev;
	}

	@Override
	public void setRev(long rev) {
		_rev = rev;
	}

	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public String getParent_id_() {
		if (_parent_id_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _parent_id_;
		}
	}

	@Override
	public void setParent_id_(String parent_id_) {
		_parent_id_ = parent_id_;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ActIdInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ActIdInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ActIdInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActIdInfoImpl actIdInfoImpl = new ActIdInfoImpl();

		actIdInfoImpl.setId(getId());
		actIdInfoImpl.setRev(getRev());
		actIdInfoImpl.setUserId(getUserId());
		actIdInfoImpl.setType(getType());
		actIdInfoImpl.setKey(getKey());
		actIdInfoImpl.setValue(getValue());
		actIdInfoImpl.setPassword(getPassword());
		actIdInfoImpl.setParent_id_(getParent_id_());

		actIdInfoImpl.resetOriginalValues();

		return actIdInfoImpl;
	}

	@Override
	public int compareTo(ActIdInfo actIdInfo) {
		long primaryKey = actIdInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActIdInfo)) {
			return false;
		}

		ActIdInfo actIdInfo = (ActIdInfo)obj;

		long primaryKey = actIdInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ActIdInfo> toCacheModel() {
		ActIdInfoCacheModel actIdInfoCacheModel = new ActIdInfoCacheModel();

		actIdInfoCacheModel.id = getId();

		actIdInfoCacheModel.rev = getRev();

		actIdInfoCacheModel.userId = getUserId();

		String userId = actIdInfoCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			actIdInfoCacheModel.userId = null;
		}

		actIdInfoCacheModel.type = getType();

		String type = actIdInfoCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			actIdInfoCacheModel.type = null;
		}

		actIdInfoCacheModel.key = getKey();

		String key = actIdInfoCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			actIdInfoCacheModel.key = null;
		}

		actIdInfoCacheModel.value = getValue();

		String value = actIdInfoCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			actIdInfoCacheModel.value = null;
		}

		actIdInfoCacheModel.password = getPassword();

		String password = actIdInfoCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			actIdInfoCacheModel.password = null;
		}

		actIdInfoCacheModel.parent_id_ = getParent_id_();

		String parent_id_ = actIdInfoCacheModel.parent_id_;

		if ((parent_id_ != null) && (parent_id_.length() == 0)) {
			actIdInfoCacheModel.parent_id_ = null;
		}

		return actIdInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", rev=");
		sb.append(getRev());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", parent_id_=");
		sb.append(getParent_id_());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.vnpt.portlet.user.model.ActIdInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rev</column-name><column-value><![CDATA[");
		sb.append(getRev());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parent_id_</column-name><column-value><![CDATA[");
		sb.append(getParent_id_());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ActIdInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ActIdInfo.class
		};
	private long _id;
	private long _rev;
	private String _userId;
	private String _type;
	private String _key;
	private String _value;
	private String _password;
	private String _parent_id_;
	private ActIdInfo _escapedModel;
}