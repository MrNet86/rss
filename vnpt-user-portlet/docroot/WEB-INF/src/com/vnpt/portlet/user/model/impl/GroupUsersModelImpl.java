/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vnpt.portlet.user.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.vnpt.portlet.user.model.GroupUsers;
import com.vnpt.portlet.user.model.GroupUsersModel;
import com.vnpt.portlet.user.service.persistence.GroupUsersPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GroupUsers service. Represents a row in the &quot;eportal_group_users&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vnpt.portlet.user.model.GroupUsersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupUsersImpl}.
 * </p>
 *
 * @author ToanNQ86
 * @see GroupUsersImpl
 * @see com.vnpt.portlet.user.model.GroupUsers
 * @see com.vnpt.portlet.user.model.GroupUsersModel
 * @generated
 */
public class GroupUsersModelImpl extends BaseModelImpl<GroupUsers>
	implements GroupUsersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a group users model instance should use the {@link com.vnpt.portlet.user.model.GroupUsers} interface instead.
	 */
	public static final String TABLE_NAME = "eportal_group_users";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permissionGroupId", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table eportal_group_users (permissionGroupId LONG not null,userId LONG not null,primary key (permissionGroupId, userId))";
	public static final String TABLE_SQL_DROP = "drop table eportal_group_users";
	public static final String ORDER_BY_JPQL = " ORDER BY groupUsers.id.permissionGroupId ASC, groupUsers.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eportal_group_users.permissionGroupId ASC, eportal_group_users.userId ASC";
	public static final String DATA_SOURCE = "eGovDataSource";
	public static final String SESSION_FACTORY = "eGovSessionFactory";
	public static final String TX_MANAGER = "eGovTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vnpt.portlet.user.model.GroupUsers"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vnpt.portlet.user.model.GroupUsers"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vnpt.portlet.user.model.GroupUsers"),
			true);
	public static long PERMISSIONGROUPID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vnpt.portlet.user.model.GroupUsers"));

	public GroupUsersModelImpl() {
	}

	@Override
	public GroupUsersPK getPrimaryKey() {
		return new GroupUsersPK(_permissionGroupId, _userId);
	}

	@Override
	public void setPrimaryKey(GroupUsersPK primaryKey) {
		setPermissionGroupId(primaryKey.permissionGroupId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new GroupUsersPK(_permissionGroupId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((GroupUsersPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GroupUsers.class;
	}

	@Override
	public String getModelClassName() {
		return GroupUsers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permissionGroupId", getPermissionGroupId());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long permissionGroupId = (Long)attributes.get("permissionGroupId");

		if (permissionGroupId != null) {
			setPermissionGroupId(permissionGroupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public long getPermissionGroupId() {
		return _permissionGroupId;
	}

	@Override
	public void setPermissionGroupId(long permissionGroupId) {
		_columnBitmask |= PERMISSIONGROUPID_COLUMN_BITMASK;

		if (!_setOriginalPermissionGroupId) {
			_setOriginalPermissionGroupId = true;

			_originalPermissionGroupId = _permissionGroupId;
		}

		_permissionGroupId = permissionGroupId;
	}

	public long getOriginalPermissionGroupId() {
		return _originalPermissionGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public GroupUsers toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GroupUsers)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroupUsersImpl groupUsersImpl = new GroupUsersImpl();

		groupUsersImpl.setPermissionGroupId(getPermissionGroupId());
		groupUsersImpl.setUserId(getUserId());

		groupUsersImpl.resetOriginalValues();

		return groupUsersImpl;
	}

	@Override
	public int compareTo(GroupUsers groupUsers) {
		GroupUsersPK primaryKey = groupUsers.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GroupUsers)) {
			return false;
		}

		GroupUsers groupUsers = (GroupUsers)obj;

		GroupUsersPK primaryKey = groupUsers.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		GroupUsersModelImpl groupUsersModelImpl = this;

		groupUsersModelImpl._originalPermissionGroupId = groupUsersModelImpl._permissionGroupId;

		groupUsersModelImpl._setOriginalPermissionGroupId = false;

		groupUsersModelImpl._originalUserId = groupUsersModelImpl._userId;

		groupUsersModelImpl._setOriginalUserId = false;

		groupUsersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GroupUsers> toCacheModel() {
		GroupUsersCacheModel groupUsersCacheModel = new GroupUsersCacheModel();

		groupUsersCacheModel.permissionGroupId = getPermissionGroupId();

		groupUsersCacheModel.userId = getUserId();

		return groupUsersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{permissionGroupId=");
		sb.append(getPermissionGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.vnpt.portlet.user.model.GroupUsers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permissionGroupId</column-name><column-value><![CDATA[");
		sb.append(getPermissionGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GroupUsers.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GroupUsers.class
		};
	private long _permissionGroupId;
	private long _originalPermissionGroupId;
	private boolean _setOriginalPermissionGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private GroupUsers _escapedModel;
}