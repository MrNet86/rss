/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vnpt.portlet.user.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.vnpt.portlet.user.model.GroupRoles;
import com.vnpt.portlet.user.model.GroupRolesModel;
import com.vnpt.portlet.user.service.persistence.GroupRolesPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GroupRoles service. Represents a row in the &quot;eportal_group_role&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vnpt.portlet.user.model.GroupRolesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupRolesImpl}.
 * </p>
 *
 * @author ToanNQ86
 * @see GroupRolesImpl
 * @see com.vnpt.portlet.user.model.GroupRoles
 * @see com.vnpt.portlet.user.model.GroupRolesModel
 * @generated
 */
public class GroupRolesModelImpl extends BaseModelImpl<GroupRoles>
	implements GroupRolesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a group roles model instance should use the {@link com.vnpt.portlet.user.model.GroupRoles} interface instead.
	 */
	public static final String TABLE_NAME = "eportal_group_role";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permissionGroupId", Types.BIGINT },
			{ "roleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table eportal_group_role (permissionGroupId LONG not null,roleId LONG not null,primary key (permissionGroupId, roleId))";
	public static final String TABLE_SQL_DROP = "drop table eportal_group_role";
	public static final String ORDER_BY_JPQL = " ORDER BY groupRoles.id.permissionGroupId ASC, groupRoles.id.roleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eportal_group_role.permissionGroupId ASC, eportal_group_role.roleId ASC";
	public static final String DATA_SOURCE = "eGovDataSource";
	public static final String SESSION_FACTORY = "eGovSessionFactory";
	public static final String TX_MANAGER = "eGovTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vnpt.portlet.user.model.GroupRoles"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vnpt.portlet.user.model.GroupRoles"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vnpt.portlet.user.model.GroupRoles"),
			true);
	public static long PERMISSIONGROUPID_COLUMN_BITMASK = 1L;
	public static long ROLEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vnpt.portlet.user.model.GroupRoles"));

	public GroupRolesModelImpl() {
	}

	@Override
	public GroupRolesPK getPrimaryKey() {
		return new GroupRolesPK(_permissionGroupId, _roleId);
	}

	@Override
	public void setPrimaryKey(GroupRolesPK primaryKey) {
		setPermissionGroupId(primaryKey.permissionGroupId);
		setRoleId(primaryKey.roleId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new GroupRolesPK(_permissionGroupId, _roleId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((GroupRolesPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GroupRoles.class;
	}

	@Override
	public String getModelClassName() {
		return GroupRoles.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permissionGroupId", getPermissionGroupId());
		attributes.put("roleId", getRoleId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long permissionGroupId = (Long)attributes.get("permissionGroupId");

		if (permissionGroupId != null) {
			setPermissionGroupId(permissionGroupId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}
	}

	@Override
	public long getPermissionGroupId() {
		return _permissionGroupId;
	}

	@Override
	public void setPermissionGroupId(long permissionGroupId) {
		_columnBitmask |= PERMISSIONGROUPID_COLUMN_BITMASK;

		if (!_setOriginalPermissionGroupId) {
			_setOriginalPermissionGroupId = true;

			_originalPermissionGroupId = _permissionGroupId;
		}

		_permissionGroupId = permissionGroupId;
	}

	public long getOriginalPermissionGroupId() {
		return _originalPermissionGroupId;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public GroupRoles toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GroupRoles)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroupRolesImpl groupRolesImpl = new GroupRolesImpl();

		groupRolesImpl.setPermissionGroupId(getPermissionGroupId());
		groupRolesImpl.setRoleId(getRoleId());

		groupRolesImpl.resetOriginalValues();

		return groupRolesImpl;
	}

	@Override
	public int compareTo(GroupRoles groupRoles) {
		GroupRolesPK primaryKey = groupRoles.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GroupRoles)) {
			return false;
		}

		GroupRoles groupRoles = (GroupRoles)obj;

		GroupRolesPK primaryKey = groupRoles.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		GroupRolesModelImpl groupRolesModelImpl = this;

		groupRolesModelImpl._originalPermissionGroupId = groupRolesModelImpl._permissionGroupId;

		groupRolesModelImpl._setOriginalPermissionGroupId = false;

		groupRolesModelImpl._originalRoleId = groupRolesModelImpl._roleId;

		groupRolesModelImpl._setOriginalRoleId = false;

		groupRolesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GroupRoles> toCacheModel() {
		GroupRolesCacheModel groupRolesCacheModel = new GroupRolesCacheModel();

		groupRolesCacheModel.permissionGroupId = getPermissionGroupId();

		groupRolesCacheModel.roleId = getRoleId();

		return groupRolesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{permissionGroupId=");
		sb.append(getPermissionGroupId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.vnpt.portlet.user.model.GroupRoles");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permissionGroupId</column-name><column-value><![CDATA[");
		sb.append(getPermissionGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GroupRoles.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GroupRoles.class
		};
	private long _permissionGroupId;
	private long _originalPermissionGroupId;
	private boolean _setOriginalPermissionGroupId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private long _columnBitmask;
	private GroupRoles _escapedModel;
}