/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vnpt.portlet.user.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vnpt.portlet.user.model.PermissionType;
import com.vnpt.portlet.user.model.PermissionTypeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PermissionType service. Represents a row in the &quot;eportal_permission_type&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vnpt.portlet.user.model.PermissionTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermissionTypeImpl}.
 * </p>
 *
 * @author ToanNQ86
 * @see PermissionTypeImpl
 * @see com.vnpt.portlet.user.model.PermissionType
 * @see com.vnpt.portlet.user.model.PermissionTypeModel
 * @generated
 */
public class PermissionTypeModelImpl extends BaseModelImpl<PermissionType>
	implements PermissionTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permission type model instance should use the {@link com.vnpt.portlet.user.model.PermissionType} interface instead.
	 */
	public static final String TABLE_NAME = "eportal_permission_type";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permissionTypeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "typeName", Types.VARCHAR },
			{ "typeCode", Types.VARCHAR },
			{ "isActive", Types.INTEGER },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eportal_permission_type (permissionTypeId LONG not null primary key,groupId LONG,companyId LONG,typeName VARCHAR(75) null,typeCode VARCHAR(75) null,isActive INTEGER,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eportal_permission_type";
	public static final String ORDER_BY_JPQL = " ORDER BY permissionType.permissionTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eportal_permission_type.permissionTypeId ASC";
	public static final String DATA_SOURCE = "eGovDataSource";
	public static final String SESSION_FACTORY = "eGovSessionFactory";
	public static final String TX_MANAGER = "eGovTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vnpt.portlet.user.model.PermissionType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vnpt.portlet.user.model.PermissionType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vnpt.portlet.user.model.PermissionType"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PERMISSIONTYPEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vnpt.portlet.user.model.PermissionType"));

	public PermissionTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _permissionTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPermissionTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _permissionTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PermissionType.class;
	}

	@Override
	public String getModelClassName() {
		return PermissionType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permissionTypeId", getPermissionTypeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("typeName", getTypeName());
		attributes.put("typeCode", getTypeCode());
		attributes.put("isActive", getIsActive());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long permissionTypeId = (Long)attributes.get("permissionTypeId");

		if (permissionTypeId != null) {
			setPermissionTypeId(permissionTypeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String typeName = (String)attributes.get("typeName");

		if (typeName != null) {
			setTypeName(typeName);
		}

		String typeCode = (String)attributes.get("typeCode");

		if (typeCode != null) {
			setTypeCode(typeCode);
		}

		Integer isActive = (Integer)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@Override
	public long getPermissionTypeId() {
		return _permissionTypeId;
	}

	@Override
	public void setPermissionTypeId(long permissionTypeId) {
		_permissionTypeId = permissionTypeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public String getTypeName() {
		if (_typeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeName;
		}
	}

	@Override
	public void setTypeName(String typeName) {
		_typeName = typeName;
	}

	@Override
	public String getTypeCode() {
		if (_typeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeCode;
		}
	}

	@Override
	public void setTypeCode(String typeCode) {
		_typeCode = typeCode;
	}

	@Override
	public int getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(int isActive) {
		_isActive = isActive;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PermissionType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PermissionType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PermissionType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PermissionTypeImpl permissionTypeImpl = new PermissionTypeImpl();

		permissionTypeImpl.setPermissionTypeId(getPermissionTypeId());
		permissionTypeImpl.setGroupId(getGroupId());
		permissionTypeImpl.setCompanyId(getCompanyId());
		permissionTypeImpl.setTypeName(getTypeName());
		permissionTypeImpl.setTypeCode(getTypeCode());
		permissionTypeImpl.setIsActive(getIsActive());
		permissionTypeImpl.setDescription(getDescription());

		permissionTypeImpl.resetOriginalValues();

		return permissionTypeImpl;
	}

	@Override
	public int compareTo(PermissionType permissionType) {
		long primaryKey = permissionType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PermissionType)) {
			return false;
		}

		PermissionType permissionType = (PermissionType)obj;

		long primaryKey = permissionType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PermissionTypeModelImpl permissionTypeModelImpl = this;

		permissionTypeModelImpl._originalGroupId = permissionTypeModelImpl._groupId;

		permissionTypeModelImpl._setOriginalGroupId = false;

		permissionTypeModelImpl._originalCompanyId = permissionTypeModelImpl._companyId;

		permissionTypeModelImpl._setOriginalCompanyId = false;

		permissionTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PermissionType> toCacheModel() {
		PermissionTypeCacheModel permissionTypeCacheModel = new PermissionTypeCacheModel();

		permissionTypeCacheModel.permissionTypeId = getPermissionTypeId();

		permissionTypeCacheModel.groupId = getGroupId();

		permissionTypeCacheModel.companyId = getCompanyId();

		permissionTypeCacheModel.typeName = getTypeName();

		String typeName = permissionTypeCacheModel.typeName;

		if ((typeName != null) && (typeName.length() == 0)) {
			permissionTypeCacheModel.typeName = null;
		}

		permissionTypeCacheModel.typeCode = getTypeCode();

		String typeCode = permissionTypeCacheModel.typeCode;

		if ((typeCode != null) && (typeCode.length() == 0)) {
			permissionTypeCacheModel.typeCode = null;
		}

		permissionTypeCacheModel.isActive = getIsActive();

		permissionTypeCacheModel.description = getDescription();

		String description = permissionTypeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			permissionTypeCacheModel.description = null;
		}

		return permissionTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{permissionTypeId=");
		sb.append(getPermissionTypeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", typeName=");
		sb.append(getTypeName());
		sb.append(", typeCode=");
		sb.append(getTypeCode());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.vnpt.portlet.user.model.PermissionType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permissionTypeId</column-name><column-value><![CDATA[");
		sb.append(getPermissionTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeName</column-name><column-value><![CDATA[");
		sb.append(getTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeCode</column-name><column-value><![CDATA[");
		sb.append(getTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PermissionType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PermissionType.class
		};
	private long _permissionTypeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _typeName;
	private String _typeCode;
	private int _isActive;
	private String _description;
	private long _columnBitmask;
	private PermissionType _escapedModel;
}