/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ims.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ims.core.model.InvestCategories;
import com.viettel.ims.core.model.InvestCategoriesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the InvestCategories service. Represents a row in the &quot;Invest_Categories&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ims.core.model.InvestCategoriesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvestCategoriesImpl}.
 * </p>
 *
 * @author MrNet
 * @see InvestCategoriesImpl
 * @see com.viettel.ims.core.model.InvestCategories
 * @see com.viettel.ims.core.model.InvestCategoriesModel
 * @generated
 */
public class InvestCategoriesModelImpl extends BaseModelImpl<InvestCategories>
	implements InvestCategoriesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invest categories model instance should use the {@link com.viettel.ims.core.model.InvestCategories} interface instead.
	 */
	public static final String TABLE_NAME = "Invest_Categories";
	public static final Object[][] TABLE_COLUMNS = {
			{ "invest_Categories_Id", Types.BIGINT },
			{ "obj_id", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "unit_id", Types.BIGINT },
			{ "cost_type", Types.BIGINT },
			{ "quantity", Types.DOUBLE },
			{ "used_Quantity", Types.DOUBLE },
			{ "unit_price", Types.DOUBLE },
			{ "cat_Currency_Id", Types.BIGINT },
			{ "type", Types.BIGINT },
			{ "vat", Types.DOUBLE },
			{ "is_Active", Types.BIGINT },
			{ "created_id", Types.BIGINT },
			{ "created_Date", Types.TIMESTAMP },
			{ "modifield_Id", Types.BIGINT },
			{ "modifield_Date", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Invest_Categories (invest_Categories_Id LONG not null primary key,obj_id LONG,name VARCHAR(75) null,description VARCHAR(75) null,unit_id LONG,cost_type LONG,quantity DOUBLE,used_Quantity DOUBLE,unit_price DOUBLE,cat_Currency_Id LONG,type LONG,vat DOUBLE,is_Active LONG,created_id LONG,created_Date DATE null,modifield_Id LONG,modifield_Date DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Invest_Categories";
	public static final String ORDER_BY_JPQL = " ORDER BY investCategories.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Invest_Categories.name ASC";
	public static final String DATA_SOURCE = "imsDataSource";
	public static final String SESSION_FACTORY = "imsSessionFactory";
	public static final String TX_MANAGER = "imsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ims.core.model.InvestCategories"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ims.core.model.InvestCategories"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.ims.core.model.InvestCategories"),
			true);
	public static long ISACTIVE_COLUMN_BITMASK = 1L;
	public static long OBJID_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ims.core.model.InvestCategories"));

	public InvestCategoriesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _investCategoriesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInvestCategoriesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _investCategoriesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InvestCategories.class;
	}

	@Override
	public String getModelClassName() {
		return InvestCategories.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("investCategoriesId", getInvestCategoriesId());
		attributes.put("objId", getObjId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("unitId", getUnitId());
		attributes.put("costType", getCostType());
		attributes.put("quantity", getQuantity());
		attributes.put("usedQuantity", getUsedQuantity());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("catCurrencyId", getCatCurrencyId());
		attributes.put("type", getType());
		attributes.put("vat", getVat());
		attributes.put("isActive", getIsActive());
		attributes.put("createdId", getCreatedId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifieldId", getModifieldId());
		attributes.put("modifieldDate", getModifieldDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long investCategoriesId = (Long)attributes.get("investCategoriesId");

		if (investCategoriesId != null) {
			setInvestCategoriesId(investCategoriesId);
		}

		Long objId = (Long)attributes.get("objId");

		if (objId != null) {
			setObjId(objId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long unitId = (Long)attributes.get("unitId");

		if (unitId != null) {
			setUnitId(unitId);
		}

		Long costType = (Long)attributes.get("costType");

		if (costType != null) {
			setCostType(costType);
		}

		Double quantity = (Double)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Double usedQuantity = (Double)attributes.get("usedQuantity");

		if (usedQuantity != null) {
			setUsedQuantity(usedQuantity);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		Long catCurrencyId = (Long)attributes.get("catCurrencyId");

		if (catCurrencyId != null) {
			setCatCurrencyId(catCurrencyId);
		}

		Long type = (Long)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Double vat = (Double)attributes.get("vat");

		if (vat != null) {
			setVat(vat);
		}

		Long isActive = (Long)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Long createdId = (Long)attributes.get("createdId");

		if (createdId != null) {
			setCreatedId(createdId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long modifieldId = (Long)attributes.get("modifieldId");

		if (modifieldId != null) {
			setModifieldId(modifieldId);
		}

		Date modifieldDate = (Date)attributes.get("modifieldDate");

		if (modifieldDate != null) {
			setModifieldDate(modifieldDate);
		}
	}

	@Override
	public long getInvestCategoriesId() {
		return _investCategoriesId;
	}

	@Override
	public void setInvestCategoriesId(long investCategoriesId) {
		_investCategoriesId = investCategoriesId;
	}

	@Override
	public long getObjId() {
		return _objId;
	}

	@Override
	public void setObjId(long objId) {
		_columnBitmask |= OBJID_COLUMN_BITMASK;

		if (!_setOriginalObjId) {
			_setOriginalObjId = true;

			_originalObjId = _objId;
		}

		_objId = objId;
	}

	public long getOriginalObjId() {
		return _originalObjId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getUnitId() {
		return _unitId;
	}

	@Override
	public void setUnitId(long unitId) {
		_unitId = unitId;
	}

	@Override
	public long getCostType() {
		return _costType;
	}

	@Override
	public void setCostType(long costType) {
		_costType = costType;
	}

	@Override
	public double getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(double quantity) {
		_quantity = quantity;
	}

	@Override
	public double getUsedQuantity() {
		return _usedQuantity;
	}

	@Override
	public void setUsedQuantity(double usedQuantity) {
		_usedQuantity = usedQuantity;
	}

	@Override
	public double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(double unitPrice) {
		_unitPrice = unitPrice;
	}

	@Override
	public long getCatCurrencyId() {
		return _catCurrencyId;
	}

	@Override
	public void setCatCurrencyId(long catCurrencyId) {
		_catCurrencyId = catCurrencyId;
	}

	@Override
	public long getType() {
		return _type;
	}

	@Override
	public void setType(long type) {
		_type = type;
	}

	@Override
	public double getVat() {
		return _vat;
	}

	@Override
	public void setVat(double vat) {
		_vat = vat;
	}

	@Override
	public long getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(long isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public long getOriginalIsActive() {
		return _originalIsActive;
	}

	@Override
	public long getCreatedId() {
		return _createdId;
	}

	@Override
	public void setCreatedId(long createdId) {
		_createdId = createdId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public long getModifieldId() {
		return _modifieldId;
	}

	@Override
	public void setModifieldId(long modifieldId) {
		_modifieldId = modifieldId;
	}

	@Override
	public Date getModifieldDate() {
		return _modifieldDate;
	}

	@Override
	public void setModifieldDate(Date modifieldDate) {
		_modifieldDate = modifieldDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InvestCategories.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InvestCategories toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InvestCategories)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvestCategoriesImpl investCategoriesImpl = new InvestCategoriesImpl();

		investCategoriesImpl.setInvestCategoriesId(getInvestCategoriesId());
		investCategoriesImpl.setObjId(getObjId());
		investCategoriesImpl.setName(getName());
		investCategoriesImpl.setDescription(getDescription());
		investCategoriesImpl.setUnitId(getUnitId());
		investCategoriesImpl.setCostType(getCostType());
		investCategoriesImpl.setQuantity(getQuantity());
		investCategoriesImpl.setUsedQuantity(getUsedQuantity());
		investCategoriesImpl.setUnitPrice(getUnitPrice());
		investCategoriesImpl.setCatCurrencyId(getCatCurrencyId());
		investCategoriesImpl.setType(getType());
		investCategoriesImpl.setVat(getVat());
		investCategoriesImpl.setIsActive(getIsActive());
		investCategoriesImpl.setCreatedId(getCreatedId());
		investCategoriesImpl.setCreatedDate(getCreatedDate());
		investCategoriesImpl.setModifieldId(getModifieldId());
		investCategoriesImpl.setModifieldDate(getModifieldDate());

		investCategoriesImpl.resetOriginalValues();

		return investCategoriesImpl;
	}

	@Override
	public int compareTo(InvestCategories investCategories) {
		int value = 0;

		value = getName().compareTo(investCategories.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InvestCategories)) {
			return false;
		}

		InvestCategories investCategories = (InvestCategories)obj;

		long primaryKey = investCategories.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InvestCategoriesModelImpl investCategoriesModelImpl = this;

		investCategoriesModelImpl._originalObjId = investCategoriesModelImpl._objId;

		investCategoriesModelImpl._setOriginalObjId = false;

		investCategoriesModelImpl._originalIsActive = investCategoriesModelImpl._isActive;

		investCategoriesModelImpl._setOriginalIsActive = false;

		investCategoriesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InvestCategories> toCacheModel() {
		InvestCategoriesCacheModel investCategoriesCacheModel = new InvestCategoriesCacheModel();

		investCategoriesCacheModel.investCategoriesId = getInvestCategoriesId();

		investCategoriesCacheModel.objId = getObjId();

		investCategoriesCacheModel.name = getName();

		String name = investCategoriesCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			investCategoriesCacheModel.name = null;
		}

		investCategoriesCacheModel.description = getDescription();

		String description = investCategoriesCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			investCategoriesCacheModel.description = null;
		}

		investCategoriesCacheModel.unitId = getUnitId();

		investCategoriesCacheModel.costType = getCostType();

		investCategoriesCacheModel.quantity = getQuantity();

		investCategoriesCacheModel.usedQuantity = getUsedQuantity();

		investCategoriesCacheModel.unitPrice = getUnitPrice();

		investCategoriesCacheModel.catCurrencyId = getCatCurrencyId();

		investCategoriesCacheModel.type = getType();

		investCategoriesCacheModel.vat = getVat();

		investCategoriesCacheModel.isActive = getIsActive();

		investCategoriesCacheModel.createdId = getCreatedId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			investCategoriesCacheModel.createdDate = createdDate.getTime();
		}
		else {
			investCategoriesCacheModel.createdDate = Long.MIN_VALUE;
		}

		investCategoriesCacheModel.modifieldId = getModifieldId();

		Date modifieldDate = getModifieldDate();

		if (modifieldDate != null) {
			investCategoriesCacheModel.modifieldDate = modifieldDate.getTime();
		}
		else {
			investCategoriesCacheModel.modifieldDate = Long.MIN_VALUE;
		}

		return investCategoriesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{investCategoriesId=");
		sb.append(getInvestCategoriesId());
		sb.append(", objId=");
		sb.append(getObjId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", unitId=");
		sb.append(getUnitId());
		sb.append(", costType=");
		sb.append(getCostType());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", usedQuantity=");
		sb.append(getUsedQuantity());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", catCurrencyId=");
		sb.append(getCatCurrencyId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", vat=");
		sb.append(getVat());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", createdId=");
		sb.append(getCreatedId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifieldId=");
		sb.append(getModifieldId());
		sb.append(", modifieldDate=");
		sb.append(getModifieldDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ims.core.model.InvestCategories");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>investCategoriesId</column-name><column-value><![CDATA[");
		sb.append(getInvestCategoriesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objId</column-name><column-value><![CDATA[");
		sb.append(getObjId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitId</column-name><column-value><![CDATA[");
		sb.append(getUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costType</column-name><column-value><![CDATA[");
		sb.append(getCostType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedQuantity</column-name><column-value><![CDATA[");
		sb.append(getUsedQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catCurrencyId</column-name><column-value><![CDATA[");
		sb.append(getCatCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vat</column-name><column-value><![CDATA[");
		sb.append(getVat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdId</column-name><column-value><![CDATA[");
		sb.append(getCreatedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifieldId</column-name><column-value><![CDATA[");
		sb.append(getModifieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifieldDate</column-name><column-value><![CDATA[");
		sb.append(getModifieldDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InvestCategories.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InvestCategories.class
		};
	private long _investCategoriesId;
	private long _objId;
	private long _originalObjId;
	private boolean _setOriginalObjId;
	private String _name;
	private String _description;
	private long _unitId;
	private long _costType;
	private double _quantity;
	private double _usedQuantity;
	private double _unitPrice;
	private long _catCurrencyId;
	private long _type;
	private double _vat;
	private long _isActive;
	private long _originalIsActive;
	private boolean _setOriginalIsActive;
	private long _createdId;
	private Date _createdDate;
	private long _modifieldId;
	private Date _modifieldDate;
	private long _columnBitmask;
	private InvestCategories _escapedModel;
}