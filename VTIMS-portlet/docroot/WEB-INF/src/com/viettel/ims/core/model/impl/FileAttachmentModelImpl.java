/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ims.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ims.core.model.FileAttachment;
import com.viettel.ims.core.model.FileAttachmentModel;
import com.viettel.ims.core.model.FileAttachmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FileAttachment service. Represents a row in the &quot;FileAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ims.core.model.FileAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileAttachmentImpl}.
 * </p>
 *
 * @author MrNet
 * @see FileAttachmentImpl
 * @see com.viettel.ims.core.model.FileAttachment
 * @see com.viettel.ims.core.model.FileAttachmentModel
 * @generated
 */
@JSON(strict = true)
public class FileAttachmentModelImpl extends BaseModelImpl<FileAttachment>
	implements FileAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a file attachment model instance should use the {@link com.viettel.ims.core.model.FileAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "FileAttachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FileAttachmentId", Types.BIGINT },
			{ "CompanyId", Types.BIGINT },
			{ "RepositoryId", Types.BIGINT },
			{ "FolderId", Types.BIGINT },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "CreatedById", Types.BIGINT },
			{ "TreePath_", Types.VARCHAR },
			{ "Name", Types.VARCHAR },
			{ "Extention", Types.VARCHAR },
			{ "MimeType", Types.VARCHAR },
			{ "Title", Types.VARCHAR },
			{ "Description", Types.VARCHAR },
			{ "ExtraSetting", Types.VARCHAR },
			{ "FileTypeId", Types.BIGINT },
			{ "Version", Types.VARCHAR },
			{ "Size_", Types.BIGINT },
			{ "ReadCount", Types.INTEGER },
			{ "SmallImageId", Types.BIGINT },
			{ "LargeImageId", Types.BIGINT },
			{ "Custom1Image", Types.BIGINT },
			{ "Custom2Image", Types.BIGINT },
			{ "IsManualCheckInRequired", Types.BOOLEAN },
			{ "ObjectType", Types.INTEGER },
			{ "objectId", Types.BIGINT },
			{ "ModifiedById", Types.BIGINT },
			{ "ModifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table FileAttachment (FileAttachmentId LONG not null primary key,CompanyId LONG,RepositoryId LONG,FolderId LONG,CreatedDate DATE null,CreatedById LONG,TreePath_ VARCHAR(75) null,Name VARCHAR(75) null,Extention VARCHAR(75) null,MimeType VARCHAR(75) null,Title VARCHAR(75) null,Description VARCHAR(75) null,ExtraSetting VARCHAR(75) null,FileTypeId LONG,Version VARCHAR(75) null,Size_ LONG,ReadCount INTEGER,SmallImageId LONG,LargeImageId LONG,Custom1Image LONG,Custom2Image LONG,IsManualCheckInRequired BOOLEAN,ObjectType INTEGER,objectId LONG,ModifiedById LONG,ModifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table FileAttachment";
	public static final String ORDER_BY_JPQL = " ORDER BY fileAttachment.companyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FileAttachment.CompanyId ASC";
	public static final String DATA_SOURCE = "imsDataSource";
	public static final String SESSION_FACTORY = "imsSessionFactory";
	public static final String TX_MANAGER = "imsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ims.core.model.FileAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ims.core.model.FileAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.ims.core.model.FileAttachment"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long OBJECTID_COLUMN_BITMASK = 2L;
	public static long OBJECTTYPE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FileAttachment toModel(FileAttachmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FileAttachment model = new FileAttachmentImpl();

		model.setFileAttachmentId(soapModel.getFileAttachmentId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setRepositoryId(soapModel.getRepositoryId());
		model.setFolderId(soapModel.getFolderId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedById(soapModel.getCreatedById());
		model.setTreePath_(soapModel.getTreePath_());
		model.setName(soapModel.getName());
		model.setExtention(soapModel.getExtention());
		model.setMimeType(soapModel.getMimeType());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setExtraSetting(soapModel.getExtraSetting());
		model.setFileTypeId(soapModel.getFileTypeId());
		model.setVersion(soapModel.getVersion());
		model.setSize_(soapModel.getSize_());
		model.setReadCount(soapModel.getReadCount());
		model.setSmallImageId(soapModel.getSmallImageId());
		model.setLargeImageId(soapModel.getLargeImageId());
		model.setCustom1Image(soapModel.getCustom1Image());
		model.setCustom2Image(soapModel.getCustom2Image());
		model.setIsManualCheckInRequired(soapModel.getIsManualCheckInRequired());
		model.setObjectType(soapModel.getObjectType());
		model.setObjectId(soapModel.getObjectId());
		model.setModifiedById(soapModel.getModifiedById());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FileAttachment> toModels(FileAttachmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FileAttachment> models = new ArrayList<FileAttachment>(soapModels.length);

		for (FileAttachmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ims.core.model.FileAttachment"));

	public FileAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FileAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return FileAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileAttachmentId", getFileAttachmentId());
		attributes.put("companyId", getCompanyId());
		attributes.put("repositoryId", getRepositoryId());
		attributes.put("folderId", getFolderId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdById", getCreatedById());
		attributes.put("treePath_", getTreePath_());
		attributes.put("name", getName());
		attributes.put("extention", getExtention());
		attributes.put("mimeType", getMimeType());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("extraSetting", getExtraSetting());
		attributes.put("fileTypeId", getFileTypeId());
		attributes.put("version", getVersion());
		attributes.put("size_", getSize_());
		attributes.put("readCount", getReadCount());
		attributes.put("smallImageId", getSmallImageId());
		attributes.put("largeImageId", getLargeImageId());
		attributes.put("custom1Image", getCustom1Image());
		attributes.put("custom2Image", getCustom2Image());
		attributes.put("isManualCheckInRequired", getIsManualCheckInRequired());
		attributes.put("objectType", getObjectType());
		attributes.put("objectId", getObjectId());
		attributes.put("modifiedById", getModifiedById());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fileAttachmentId = (Long)attributes.get("fileAttachmentId");

		if (fileAttachmentId != null) {
			setFileAttachmentId(fileAttachmentId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long repositoryId = (Long)attributes.get("repositoryId");

		if (repositoryId != null) {
			setRepositoryId(repositoryId);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long createdById = (Long)attributes.get("createdById");

		if (createdById != null) {
			setCreatedById(createdById);
		}

		String treePath_ = (String)attributes.get("treePath_");

		if (treePath_ != null) {
			setTreePath_(treePath_);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String extention = (String)attributes.get("extention");

		if (extention != null) {
			setExtention(extention);
		}

		String mimeType = (String)attributes.get("mimeType");

		if (mimeType != null) {
			setMimeType(mimeType);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String extraSetting = (String)attributes.get("extraSetting");

		if (extraSetting != null) {
			setExtraSetting(extraSetting);
		}

		Long fileTypeId = (Long)attributes.get("fileTypeId");

		if (fileTypeId != null) {
			setFileTypeId(fileTypeId);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Long size_ = (Long)attributes.get("size_");

		if (size_ != null) {
			setSize_(size_);
		}

		Integer readCount = (Integer)attributes.get("readCount");

		if (readCount != null) {
			setReadCount(readCount);
		}

		Long smallImageId = (Long)attributes.get("smallImageId");

		if (smallImageId != null) {
			setSmallImageId(smallImageId);
		}

		Long largeImageId = (Long)attributes.get("largeImageId");

		if (largeImageId != null) {
			setLargeImageId(largeImageId);
		}

		Long custom1Image = (Long)attributes.get("custom1Image");

		if (custom1Image != null) {
			setCustom1Image(custom1Image);
		}

		Long custom2Image = (Long)attributes.get("custom2Image");

		if (custom2Image != null) {
			setCustom2Image(custom2Image);
		}

		Boolean isManualCheckInRequired = (Boolean)attributes.get(
				"isManualCheckInRequired");

		if (isManualCheckInRequired != null) {
			setIsManualCheckInRequired(isManualCheckInRequired);
		}

		Integer objectType = (Integer)attributes.get("objectType");

		if (objectType != null) {
			setObjectType(objectType);
		}

		Long objectId = (Long)attributes.get("objectId");

		if (objectId != null) {
			setObjectId(objectId);
		}

		Long modifiedById = (Long)attributes.get("modifiedById");

		if (modifiedById != null) {
			setModifiedById(modifiedById);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getFileAttachmentId() {
		return _fileAttachmentId;
	}

	@Override
	public void setFileAttachmentId(long fileAttachmentId) {
		_fileAttachmentId = fileAttachmentId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask = -1L;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getRepositoryId() {
		return _repositoryId;
	}

	@Override
	public void setRepositoryId(long repositoryId) {
		_repositoryId = repositoryId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@JSON
	@Override
	public String getTreePath_() {
		if (_treePath_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _treePath_;
		}
	}

	@Override
	public void setTreePath_(String treePath_) {
		_treePath_ = treePath_;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getExtention() {
		if (_extention == null) {
			return StringPool.BLANK;
		}
		else {
			return _extention;
		}
	}

	@Override
	public void setExtention(String extention) {
		_extention = extention;
	}

	@JSON
	@Override
	public String getMimeType() {
		if (_mimeType == null) {
			return StringPool.BLANK;
		}
		else {
			return _mimeType;
		}
	}

	@Override
	public void setMimeType(String mimeType) {
		_mimeType = mimeType;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getExtraSetting() {
		if (_extraSetting == null) {
			return StringPool.BLANK;
		}
		else {
			return _extraSetting;
		}
	}

	@Override
	public void setExtraSetting(String extraSetting) {
		_extraSetting = extraSetting;
	}

	@JSON
	@Override
	public long getFileTypeId() {
		return _fileTypeId;
	}

	@Override
	public void setFileTypeId(long fileTypeId) {
		_fileTypeId = fileTypeId;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public long getSize_() {
		return _size_;
	}

	@Override
	public void setSize_(long size_) {
		_size_ = size_;
	}

	@JSON
	@Override
	public int getReadCount() {
		return _readCount;
	}

	@Override
	public void setReadCount(int readCount) {
		_readCount = readCount;
	}

	@JSON
	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_smallImageId = smallImageId;
	}

	@JSON
	@Override
	public long getLargeImageId() {
		return _largeImageId;
	}

	@Override
	public void setLargeImageId(long largeImageId) {
		_largeImageId = largeImageId;
	}

	@JSON
	@Override
	public long getCustom1Image() {
		return _custom1Image;
	}

	@Override
	public void setCustom1Image(long custom1Image) {
		_custom1Image = custom1Image;
	}

	@JSON
	@Override
	public long getCustom2Image() {
		return _custom2Image;
	}

	@Override
	public void setCustom2Image(long custom2Image) {
		_custom2Image = custom2Image;
	}

	@JSON
	@Override
	public boolean getIsManualCheckInRequired() {
		return _isManualCheckInRequired;
	}

	@Override
	public boolean isIsManualCheckInRequired() {
		return _isManualCheckInRequired;
	}

	@Override
	public void setIsManualCheckInRequired(boolean isManualCheckInRequired) {
		_isManualCheckInRequired = isManualCheckInRequired;
	}

	@JSON
	@Override
	public int getObjectType() {
		return _objectType;
	}

	@Override
	public void setObjectType(int objectType) {
		_columnBitmask |= OBJECTTYPE_COLUMN_BITMASK;

		if (!_setOriginalObjectType) {
			_setOriginalObjectType = true;

			_originalObjectType = _objectType;
		}

		_objectType = objectType;
	}

	public int getOriginalObjectType() {
		return _originalObjectType;
	}

	@JSON
	@Override
	public long getObjectId() {
		return _objectId;
	}

	@Override
	public void setObjectId(long objectId) {
		_columnBitmask |= OBJECTID_COLUMN_BITMASK;

		if (!_setOriginalObjectId) {
			_setOriginalObjectId = true;

			_originalObjectId = _objectId;
		}

		_objectId = objectId;
	}

	public long getOriginalObjectId() {
		return _originalObjectId;
	}

	@JSON
	@Override
	public long getModifiedById() {
		return _modifiedById;
	}

	@Override
	public void setModifiedById(long modifiedById) {
		_modifiedById = modifiedById;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FileAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FileAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FileAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FileAttachmentImpl fileAttachmentImpl = new FileAttachmentImpl();

		fileAttachmentImpl.setFileAttachmentId(getFileAttachmentId());
		fileAttachmentImpl.setCompanyId(getCompanyId());
		fileAttachmentImpl.setRepositoryId(getRepositoryId());
		fileAttachmentImpl.setFolderId(getFolderId());
		fileAttachmentImpl.setCreatedDate(getCreatedDate());
		fileAttachmentImpl.setCreatedById(getCreatedById());
		fileAttachmentImpl.setTreePath_(getTreePath_());
		fileAttachmentImpl.setName(getName());
		fileAttachmentImpl.setExtention(getExtention());
		fileAttachmentImpl.setMimeType(getMimeType());
		fileAttachmentImpl.setTitle(getTitle());
		fileAttachmentImpl.setDescription(getDescription());
		fileAttachmentImpl.setExtraSetting(getExtraSetting());
		fileAttachmentImpl.setFileTypeId(getFileTypeId());
		fileAttachmentImpl.setVersion(getVersion());
		fileAttachmentImpl.setSize_(getSize_());
		fileAttachmentImpl.setReadCount(getReadCount());
		fileAttachmentImpl.setSmallImageId(getSmallImageId());
		fileAttachmentImpl.setLargeImageId(getLargeImageId());
		fileAttachmentImpl.setCustom1Image(getCustom1Image());
		fileAttachmentImpl.setCustom2Image(getCustom2Image());
		fileAttachmentImpl.setIsManualCheckInRequired(getIsManualCheckInRequired());
		fileAttachmentImpl.setObjectType(getObjectType());
		fileAttachmentImpl.setObjectId(getObjectId());
		fileAttachmentImpl.setModifiedById(getModifiedById());
		fileAttachmentImpl.setModifiedDate(getModifiedDate());

		fileAttachmentImpl.resetOriginalValues();

		return fileAttachmentImpl;
	}

	@Override
	public int compareTo(FileAttachment fileAttachment) {
		int value = 0;

		if (getCompanyId() < fileAttachment.getCompanyId()) {
			value = -1;
		}
		else if (getCompanyId() > fileAttachment.getCompanyId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FileAttachment)) {
			return false;
		}

		FileAttachment fileAttachment = (FileAttachment)obj;

		long primaryKey = fileAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FileAttachmentModelImpl fileAttachmentModelImpl = this;

		fileAttachmentModelImpl._originalCompanyId = fileAttachmentModelImpl._companyId;

		fileAttachmentModelImpl._setOriginalCompanyId = false;

		fileAttachmentModelImpl._originalObjectType = fileAttachmentModelImpl._objectType;

		fileAttachmentModelImpl._setOriginalObjectType = false;

		fileAttachmentModelImpl._originalObjectId = fileAttachmentModelImpl._objectId;

		fileAttachmentModelImpl._setOriginalObjectId = false;

		fileAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FileAttachment> toCacheModel() {
		FileAttachmentCacheModel fileAttachmentCacheModel = new FileAttachmentCacheModel();

		fileAttachmentCacheModel.fileAttachmentId = getFileAttachmentId();

		fileAttachmentCacheModel.companyId = getCompanyId();

		fileAttachmentCacheModel.repositoryId = getRepositoryId();

		fileAttachmentCacheModel.folderId = getFolderId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			fileAttachmentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			fileAttachmentCacheModel.createdDate = Long.MIN_VALUE;
		}

		fileAttachmentCacheModel.createdById = getCreatedById();

		fileAttachmentCacheModel.treePath_ = getTreePath_();

		String treePath_ = fileAttachmentCacheModel.treePath_;

		if ((treePath_ != null) && (treePath_.length() == 0)) {
			fileAttachmentCacheModel.treePath_ = null;
		}

		fileAttachmentCacheModel.name = getName();

		String name = fileAttachmentCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			fileAttachmentCacheModel.name = null;
		}

		fileAttachmentCacheModel.extention = getExtention();

		String extention = fileAttachmentCacheModel.extention;

		if ((extention != null) && (extention.length() == 0)) {
			fileAttachmentCacheModel.extention = null;
		}

		fileAttachmentCacheModel.mimeType = getMimeType();

		String mimeType = fileAttachmentCacheModel.mimeType;

		if ((mimeType != null) && (mimeType.length() == 0)) {
			fileAttachmentCacheModel.mimeType = null;
		}

		fileAttachmentCacheModel.title = getTitle();

		String title = fileAttachmentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			fileAttachmentCacheModel.title = null;
		}

		fileAttachmentCacheModel.description = getDescription();

		String description = fileAttachmentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			fileAttachmentCacheModel.description = null;
		}

		fileAttachmentCacheModel.extraSetting = getExtraSetting();

		String extraSetting = fileAttachmentCacheModel.extraSetting;

		if ((extraSetting != null) && (extraSetting.length() == 0)) {
			fileAttachmentCacheModel.extraSetting = null;
		}

		fileAttachmentCacheModel.fileTypeId = getFileTypeId();

		fileAttachmentCacheModel.version = getVersion();

		String version = fileAttachmentCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			fileAttachmentCacheModel.version = null;
		}

		fileAttachmentCacheModel.size_ = getSize_();

		fileAttachmentCacheModel.readCount = getReadCount();

		fileAttachmentCacheModel.smallImageId = getSmallImageId();

		fileAttachmentCacheModel.largeImageId = getLargeImageId();

		fileAttachmentCacheModel.custom1Image = getCustom1Image();

		fileAttachmentCacheModel.custom2Image = getCustom2Image();

		fileAttachmentCacheModel.isManualCheckInRequired = getIsManualCheckInRequired();

		fileAttachmentCacheModel.objectType = getObjectType();

		fileAttachmentCacheModel.objectId = getObjectId();

		fileAttachmentCacheModel.modifiedById = getModifiedById();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fileAttachmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fileAttachmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return fileAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{fileAttachmentId=");
		sb.append(getFileAttachmentId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", repositoryId=");
		sb.append(getRepositoryId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdById=");
		sb.append(getCreatedById());
		sb.append(", treePath_=");
		sb.append(getTreePath_());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", extention=");
		sb.append(getExtention());
		sb.append(", mimeType=");
		sb.append(getMimeType());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", extraSetting=");
		sb.append(getExtraSetting());
		sb.append(", fileTypeId=");
		sb.append(getFileTypeId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", size_=");
		sb.append(getSize_());
		sb.append(", readCount=");
		sb.append(getReadCount());
		sb.append(", smallImageId=");
		sb.append(getSmallImageId());
		sb.append(", largeImageId=");
		sb.append(getLargeImageId());
		sb.append(", custom1Image=");
		sb.append(getCustom1Image());
		sb.append(", custom2Image=");
		sb.append(getCustom2Image());
		sb.append(", isManualCheckInRequired=");
		sb.append(getIsManualCheckInRequired());
		sb.append(", objectType=");
		sb.append(getObjectType());
		sb.append(", objectId=");
		sb.append(getObjectId());
		sb.append(", modifiedById=");
		sb.append(getModifiedById());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ims.core.model.FileAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getFileAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdById</column-name><column-value><![CDATA[");
		sb.append(getCreatedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>treePath_</column-name><column-value><![CDATA[");
		sb.append(getTreePath_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extention</column-name><column-value><![CDATA[");
		sb.append(getExtention());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mimeType</column-name><column-value><![CDATA[");
		sb.append(getMimeType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extraSetting</column-name><column-value><![CDATA[");
		sb.append(getExtraSetting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileTypeId</column-name><column-value><![CDATA[");
		sb.append(getFileTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>size_</column-name><column-value><![CDATA[");
		sb.append(getSize_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>readCount</column-name><column-value><![CDATA[");
		sb.append(getReadCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageId</column-name><column-value><![CDATA[");
		sb.append(getSmallImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>largeImageId</column-name><column-value><![CDATA[");
		sb.append(getLargeImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>custom1Image</column-name><column-value><![CDATA[");
		sb.append(getCustom1Image());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>custom2Image</column-name><column-value><![CDATA[");
		sb.append(getCustom2Image());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isManualCheckInRequired</column-name><column-value><![CDATA[");
		sb.append(getIsManualCheckInRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectType</column-name><column-value><![CDATA[");
		sb.append(getObjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectId</column-name><column-value><![CDATA[");
		sb.append(getObjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedById</column-name><column-value><![CDATA[");
		sb.append(getModifiedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FileAttachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FileAttachment.class
		};
	private long _fileAttachmentId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _repositoryId;
	private long _folderId;
	private Date _createdDate;
	private long _createdById;
	private String _treePath_;
	private String _name;
	private String _extention;
	private String _mimeType;
	private String _title;
	private String _description;
	private String _extraSetting;
	private long _fileTypeId;
	private String _version;
	private long _size_;
	private int _readCount;
	private long _smallImageId;
	private long _largeImageId;
	private long _custom1Image;
	private long _custom2Image;
	private boolean _isManualCheckInRequired;
	private int _objectType;
	private int _originalObjectType;
	private boolean _setOriginalObjectType;
	private long _objectId;
	private long _originalObjectId;
	private boolean _setOriginalObjectId;
	private long _modifiedById;
	private Date _modifiedDate;
	private long _columnBitmask;
	private FileAttachment _escapedModel;
}