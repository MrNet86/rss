/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ams.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ams.core.model.MerEntity;
import com.viettel.ams.core.model.MerEntityModel;
import com.viettel.ams.core.model.MerEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MerEntity service. Represents a row in the &quot;Mer_Entity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ams.core.model.MerEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MerEntityImpl}.
 * </p>
 *
 * @author MrNet
 * @see MerEntityImpl
 * @see com.viettel.ams.core.model.MerEntity
 * @see com.viettel.ams.core.model.MerEntityModel
 * @generated
 */
@JSON(strict = true)
public class MerEntityModelImpl extends BaseModelImpl<MerEntity>
	implements MerEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mer entity model instance should use the {@link com.viettel.ams.core.model.MerEntity} interface instead.
	 */
	public static final String TABLE_NAME = "Mer_Entity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MER_ENTITY_ID", Types.BIGINT },
			{ "SERIAL_NUMBER", Types.VARCHAR },
			{ "UNIT_PRICE", Types.DOUBLE },
			{ "MER_ID", Types.BIGINT },
			{ "CONTRACT_ID", Types.BIGINT },
			{ "GROUP_ID", Types.BIGINT },
			{ "WAREHOUSE_ID", Types.BIGINT },
			{ "CONSTRUCTION_ID", Types.BIGINT },
			{ "IS_MERCHANDISE", Types.BIGINT },
			{ "STATUS_ID", Types.BIGINT },
			{ "PARENT_ID", Types.BIGINT },
			{ "USER_ID", Types.BIGINT },
			{ "UPGRADE_PARENT_ID", Types.BIGINT },
			{ "PART_NUMBER", Types.VARCHAR },
			{ "COUNT", Types.DOUBLE },
			{ "IS_TEMP", Types.BIGINT },
			{ "PATH", Types.VARCHAR },
			{ "ORIGINAL_PRICE", Types.DOUBLE },
			{ "MANAGER_NAME", Types.VARCHAR },
			{ "IS_EXPENSE", Types.BIGINT },
			{ "USE_GROUP_ID", Types.BIGINT },
			{ "KEY_SEARCH", Types.BIGINT },
			{ "CONTRACT_CODE", Types.VARCHAR },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "STATION_ID", Types.BIGINT },
			{ "IS_INVENTORY", Types.BIGINT },
			{ "ENTITY_TYPE", Types.BIGINT },
			{ "QUALITY", Types.BIGINT },
			{ "CAT_EMPLOYEE_ID", Types.BIGINT },
			{ "CREATED_DATE", Types.TIMESTAMP },
			{ "IS_LOCK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Mer_Entity (MER_ENTITY_ID LONG not null primary key,SERIAL_NUMBER VARCHAR(75) null,UNIT_PRICE DOUBLE,MER_ID LONG,CONTRACT_ID LONG,GROUP_ID LONG,WAREHOUSE_ID LONG,CONSTRUCTION_ID LONG,IS_MERCHANDISE LONG,STATUS_ID LONG,PARENT_ID LONG,USER_ID LONG,UPGRADE_PARENT_ID LONG,PART_NUMBER VARCHAR(75) null,COUNT DOUBLE,IS_TEMP LONG,PATH VARCHAR(75) null,ORIGINAL_PRICE DOUBLE,MANAGER_NAME VARCHAR(75) null,IS_EXPENSE LONG,USE_GROUP_ID LONG,KEY_SEARCH LONG,CONTRACT_CODE VARCHAR(75) null,DESCRIPTION VARCHAR(75) null,STATION_ID LONG,IS_INVENTORY LONG,ENTITY_TYPE LONG,QUALITY LONG,CAT_EMPLOYEE_ID LONG,CREATED_DATE DATE null,IS_LOCK LONG)";
	public static final String TABLE_SQL_DROP = "drop table Mer_Entity";
	public static final String ORDER_BY_JPQL = " ORDER BY merEntity.merEntityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Mer_Entity.MER_ENTITY_ID ASC";
	public static final String DATA_SOURCE = "amsDataSource";
	public static final String SESSION_FACTORY = "amsSessionFactory";
	public static final String TX_MANAGER = "amsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ams.core.model.MerEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ams.core.model.MerEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.ams.core.model.MerEntity"),
			true);
	public static long MERENTITYID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MerEntity toModel(MerEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MerEntity model = new MerEntityImpl();

		model.setMerEntityId(soapModel.getMerEntityId());
		model.setSerialNumber(soapModel.getSerialNumber());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setMerId(soapModel.getMerId());
		model.setContractid(soapModel.getContractid());
		model.setGroupId(soapModel.getGroupId());
		model.setWarehouseId(soapModel.getWarehouseId());
		model.setConstructionId(soapModel.getConstructionId());
		model.setIsMerchandise(soapModel.getIsMerchandise());
		model.setStatusId(soapModel.getStatusId());
		model.setParentId(soapModel.getParentId());
		model.setUserId(soapModel.getUserId());
		model.setUpgradeParentId(soapModel.getUpgradeParentId());
		model.setPartNumber(soapModel.getPartNumber());
		model.setCount(soapModel.getCount());
		model.setIsTemp(soapModel.getIsTemp());
		model.setPath(soapModel.getPath());
		model.setOriginalPrice(soapModel.getOriginalPrice());
		model.setManagerName(soapModel.getManagerName());
		model.setIsExpense(soapModel.getIsExpense());
		model.setUseGroupId(soapModel.getUseGroupId());
		model.setKeySearch(soapModel.getKeySearch());
		model.setContractCode(soapModel.getContractCode());
		model.setDescription(soapModel.getDescription());
		model.setStationId(soapModel.getStationId());
		model.setIsInventory(soapModel.getIsInventory());
		model.setEntityType(soapModel.getEntityType());
		model.setQuality(soapModel.getQuality());
		model.setCatEmployeeId(soapModel.getCatEmployeeId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setIsLock(soapModel.getIsLock());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MerEntity> toModels(MerEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MerEntity> models = new ArrayList<MerEntity>(soapModels.length);

		for (MerEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ams.core.model.MerEntity"));

	public MerEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _merEntityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMerEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _merEntityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MerEntity.class;
	}

	@Override
	public String getModelClassName() {
		return MerEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("merEntityId", getMerEntityId());
		attributes.put("serialNumber", getSerialNumber());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("merId", getMerId());
		attributes.put("contractid", getContractid());
		attributes.put("groupId", getGroupId());
		attributes.put("warehouseId", getWarehouseId());
		attributes.put("constructionId", getConstructionId());
		attributes.put("isMerchandise", getIsMerchandise());
		attributes.put("statusId", getStatusId());
		attributes.put("parentId", getParentId());
		attributes.put("userId", getUserId());
		attributes.put("upgradeParentId", getUpgradeParentId());
		attributes.put("partNumber", getPartNumber());
		attributes.put("count", getCount());
		attributes.put("isTemp", getIsTemp());
		attributes.put("path", getPath());
		attributes.put("originalPrice", getOriginalPrice());
		attributes.put("managerName", getManagerName());
		attributes.put("isExpense", getIsExpense());
		attributes.put("useGroupId", getUseGroupId());
		attributes.put("keySearch", getKeySearch());
		attributes.put("contractCode", getContractCode());
		attributes.put("description", getDescription());
		attributes.put("stationId", getStationId());
		attributes.put("isInventory", getIsInventory());
		attributes.put("entityType", getEntityType());
		attributes.put("quality", getQuality());
		attributes.put("catEmployeeId", getCatEmployeeId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("isLock", getIsLock());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long merEntityId = (Long)attributes.get("merEntityId");

		if (merEntityId != null) {
			setMerEntityId(merEntityId);
		}

		String serialNumber = (String)attributes.get("serialNumber");

		if (serialNumber != null) {
			setSerialNumber(serialNumber);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		Long merId = (Long)attributes.get("merId");

		if (merId != null) {
			setMerId(merId);
		}

		Long contractid = (Long)attributes.get("contractid");

		if (contractid != null) {
			setContractid(contractid);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long warehouseId = (Long)attributes.get("warehouseId");

		if (warehouseId != null) {
			setWarehouseId(warehouseId);
		}

		Long constructionId = (Long)attributes.get("constructionId");

		if (constructionId != null) {
			setConstructionId(constructionId);
		}

		Long isMerchandise = (Long)attributes.get("isMerchandise");

		if (isMerchandise != null) {
			setIsMerchandise(isMerchandise);
		}

		Long statusId = (Long)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long upgradeParentId = (Long)attributes.get("upgradeParentId");

		if (upgradeParentId != null) {
			setUpgradeParentId(upgradeParentId);
		}

		String partNumber = (String)attributes.get("partNumber");

		if (partNumber != null) {
			setPartNumber(partNumber);
		}

		Double count = (Double)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Long isTemp = (Long)attributes.get("isTemp");

		if (isTemp != null) {
			setIsTemp(isTemp);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Double originalPrice = (Double)attributes.get("originalPrice");

		if (originalPrice != null) {
			setOriginalPrice(originalPrice);
		}

		String managerName = (String)attributes.get("managerName");

		if (managerName != null) {
			setManagerName(managerName);
		}

		Long isExpense = (Long)attributes.get("isExpense");

		if (isExpense != null) {
			setIsExpense(isExpense);
		}

		Long useGroupId = (Long)attributes.get("useGroupId");

		if (useGroupId != null) {
			setUseGroupId(useGroupId);
		}

		Long keySearch = (Long)attributes.get("keySearch");

		if (keySearch != null) {
			setKeySearch(keySearch);
		}

		String contractCode = (String)attributes.get("contractCode");

		if (contractCode != null) {
			setContractCode(contractCode);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long stationId = (Long)attributes.get("stationId");

		if (stationId != null) {
			setStationId(stationId);
		}

		Long isInventory = (Long)attributes.get("isInventory");

		if (isInventory != null) {
			setIsInventory(isInventory);
		}

		Long entityType = (Long)attributes.get("entityType");

		if (entityType != null) {
			setEntityType(entityType);
		}

		Long quality = (Long)attributes.get("quality");

		if (quality != null) {
			setQuality(quality);
		}

		Long catEmployeeId = (Long)attributes.get("catEmployeeId");

		if (catEmployeeId != null) {
			setCatEmployeeId(catEmployeeId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long isLock = (Long)attributes.get("isLock");

		if (isLock != null) {
			setIsLock(isLock);
		}
	}

	@JSON
	@Override
	public long getMerEntityId() {
		return _merEntityId;
	}

	@Override
	public void setMerEntityId(long merEntityId) {
		_columnBitmask |= MERENTITYID_COLUMN_BITMASK;

		if (!_setOriginalMerEntityId) {
			_setOriginalMerEntityId = true;

			_originalMerEntityId = _merEntityId;
		}

		_merEntityId = merEntityId;
	}

	public long getOriginalMerEntityId() {
		return _originalMerEntityId;
	}

	@JSON
	@Override
	public String getSerialNumber() {
		if (_serialNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _serialNumber;
		}
	}

	@Override
	public void setSerialNumber(String serialNumber) {
		_serialNumber = serialNumber;
	}

	@JSON
	@Override
	public Double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(Double unitPrice) {
		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public Long getMerId() {
		return _merId;
	}

	@Override
	public void setMerId(Long merId) {
		_merId = merId;
	}

	@JSON
	@Override
	public Long getContractid() {
		return _contractid;
	}

	@Override
	public void setContractid(Long contractid) {
		_contractid = contractid;
	}

	@JSON
	@Override
	public Long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(Long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Long getWarehouseId() {
		return _warehouseId;
	}

	@Override
	public void setWarehouseId(Long warehouseId) {
		_warehouseId = warehouseId;
	}

	@JSON
	@Override
	public Long getConstructionId() {
		return _constructionId;
	}

	@Override
	public void setConstructionId(Long constructionId) {
		_constructionId = constructionId;
	}

	@JSON
	@Override
	public Long getIsMerchandise() {
		return _isMerchandise;
	}

	@Override
	public void setIsMerchandise(Long isMerchandise) {
		_isMerchandise = isMerchandise;
	}

	@JSON
	@Override
	public Long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(Long statusId) {
		_statusId = statusId;
	}

	@JSON
	@Override
	public Long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(Long parentId) {
		_parentId = parentId;
	}

	@JSON
	@Override
	public Long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(Long userId) {
		_userId = userId;
	}

	@JSON
	@Override
	public Long getUpgradeParentId() {
		return _upgradeParentId;
	}

	@Override
	public void setUpgradeParentId(Long upgradeParentId) {
		_upgradeParentId = upgradeParentId;
	}

	@JSON
	@Override
	public String getPartNumber() {
		if (_partNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _partNumber;
		}
	}

	@Override
	public void setPartNumber(String partNumber) {
		_partNumber = partNumber;
	}

	@JSON
	@Override
	public Double getCount() {
		return _count;
	}

	@Override
	public void setCount(Double count) {
		_count = count;
	}

	@JSON
	@Override
	public Long getIsTemp() {
		return _isTemp;
	}

	@Override
	public void setIsTemp(Long isTemp) {
		_isTemp = isTemp;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@JSON
	@Override
	public Double getOriginalPrice() {
		return _originalPrice;
	}

	@Override
	public void setOriginalPrice(Double originalPrice) {
		_originalPrice = originalPrice;
	}

	@JSON
	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		_managerName = managerName;
	}

	@JSON
	@Override
	public Long getIsExpense() {
		return _isExpense;
	}

	@Override
	public void setIsExpense(Long isExpense) {
		_isExpense = isExpense;
	}

	@JSON
	@Override
	public Long getUseGroupId() {
		return _useGroupId;
	}

	@Override
	public void setUseGroupId(Long useGroupId) {
		_useGroupId = useGroupId;
	}

	@JSON
	@Override
	public Long getKeySearch() {
		return _keySearch;
	}

	@Override
	public void setKeySearch(Long keySearch) {
		_keySearch = keySearch;
	}

	@JSON
	@Override
	public String getContractCode() {
		if (_contractCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractCode;
		}
	}

	@Override
	public void setContractCode(String contractCode) {
		_contractCode = contractCode;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Long getStationId() {
		return _stationId;
	}

	@Override
	public void setStationId(Long stationId) {
		_stationId = stationId;
	}

	@JSON
	@Override
	public Long getIsInventory() {
		return _isInventory;
	}

	@Override
	public void setIsInventory(Long isInventory) {
		_isInventory = isInventory;
	}

	@JSON
	@Override
	public Long getEntityType() {
		return _entityType;
	}

	@Override
	public void setEntityType(Long entityType) {
		_entityType = entityType;
	}

	@JSON
	@Override
	public Long getQuality() {
		return _quality;
	}

	@Override
	public void setQuality(Long quality) {
		_quality = quality;
	}

	@JSON
	@Override
	public Long getCatEmployeeId() {
		return _catEmployeeId;
	}

	@Override
	public void setCatEmployeeId(Long catEmployeeId) {
		_catEmployeeId = catEmployeeId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Long getIsLock() {
		return _isLock;
	}

	@Override
	public void setIsLock(Long isLock) {
		_isLock = isLock;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MerEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MerEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MerEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MerEntityImpl merEntityImpl = new MerEntityImpl();

		merEntityImpl.setMerEntityId(getMerEntityId());
		merEntityImpl.setSerialNumber(getSerialNumber());
		merEntityImpl.setUnitPrice(getUnitPrice());
		merEntityImpl.setMerId(getMerId());
		merEntityImpl.setContractid(getContractid());
		merEntityImpl.setGroupId(getGroupId());
		merEntityImpl.setWarehouseId(getWarehouseId());
		merEntityImpl.setConstructionId(getConstructionId());
		merEntityImpl.setIsMerchandise(getIsMerchandise());
		merEntityImpl.setStatusId(getStatusId());
		merEntityImpl.setParentId(getParentId());
		merEntityImpl.setUserId(getUserId());
		merEntityImpl.setUpgradeParentId(getUpgradeParentId());
		merEntityImpl.setPartNumber(getPartNumber());
		merEntityImpl.setCount(getCount());
		merEntityImpl.setIsTemp(getIsTemp());
		merEntityImpl.setPath(getPath());
		merEntityImpl.setOriginalPrice(getOriginalPrice());
		merEntityImpl.setManagerName(getManagerName());
		merEntityImpl.setIsExpense(getIsExpense());
		merEntityImpl.setUseGroupId(getUseGroupId());
		merEntityImpl.setKeySearch(getKeySearch());
		merEntityImpl.setContractCode(getContractCode());
		merEntityImpl.setDescription(getDescription());
		merEntityImpl.setStationId(getStationId());
		merEntityImpl.setIsInventory(getIsInventory());
		merEntityImpl.setEntityType(getEntityType());
		merEntityImpl.setQuality(getQuality());
		merEntityImpl.setCatEmployeeId(getCatEmployeeId());
		merEntityImpl.setCreatedDate(getCreatedDate());
		merEntityImpl.setIsLock(getIsLock());

		merEntityImpl.resetOriginalValues();

		return merEntityImpl;
	}

	@Override
	public int compareTo(MerEntity merEntity) {
		long primaryKey = merEntity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MerEntity)) {
			return false;
		}

		MerEntity merEntity = (MerEntity)obj;

		long primaryKey = merEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MerEntityModelImpl merEntityModelImpl = this;

		merEntityModelImpl._originalMerEntityId = merEntityModelImpl._merEntityId;

		merEntityModelImpl._setOriginalMerEntityId = false;

		merEntityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MerEntity> toCacheModel() {
		MerEntityCacheModel merEntityCacheModel = new MerEntityCacheModel();

		merEntityCacheModel.merEntityId = getMerEntityId();

		merEntityCacheModel.serialNumber = getSerialNumber();

		String serialNumber = merEntityCacheModel.serialNumber;

		if ((serialNumber != null) && (serialNumber.length() == 0)) {
			merEntityCacheModel.serialNumber = null;
		}

		merEntityCacheModel.unitPrice = getUnitPrice();

		merEntityCacheModel.merId = getMerId();

		merEntityCacheModel.contractid = getContractid();

		merEntityCacheModel.groupId = getGroupId();

		merEntityCacheModel.warehouseId = getWarehouseId();

		merEntityCacheModel.constructionId = getConstructionId();

		merEntityCacheModel.isMerchandise = getIsMerchandise();

		merEntityCacheModel.statusId = getStatusId();

		merEntityCacheModel.parentId = getParentId();

		merEntityCacheModel.userId = getUserId();

		merEntityCacheModel.upgradeParentId = getUpgradeParentId();

		merEntityCacheModel.partNumber = getPartNumber();

		String partNumber = merEntityCacheModel.partNumber;

		if ((partNumber != null) && (partNumber.length() == 0)) {
			merEntityCacheModel.partNumber = null;
		}

		merEntityCacheModel.count = getCount();

		merEntityCacheModel.isTemp = getIsTemp();

		merEntityCacheModel.path = getPath();

		String path = merEntityCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			merEntityCacheModel.path = null;
		}

		merEntityCacheModel.originalPrice = getOriginalPrice();

		merEntityCacheModel.managerName = getManagerName();

		String managerName = merEntityCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			merEntityCacheModel.managerName = null;
		}

		merEntityCacheModel.isExpense = getIsExpense();

		merEntityCacheModel.useGroupId = getUseGroupId();

		merEntityCacheModel.keySearch = getKeySearch();

		merEntityCacheModel.contractCode = getContractCode();

		String contractCode = merEntityCacheModel.contractCode;

		if ((contractCode != null) && (contractCode.length() == 0)) {
			merEntityCacheModel.contractCode = null;
		}

		merEntityCacheModel.description = getDescription();

		String description = merEntityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			merEntityCacheModel.description = null;
		}

		merEntityCacheModel.stationId = getStationId();

		merEntityCacheModel.isInventory = getIsInventory();

		merEntityCacheModel.entityType = getEntityType();

		merEntityCacheModel.quality = getQuality();

		merEntityCacheModel.catEmployeeId = getCatEmployeeId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			merEntityCacheModel.createdDate = createdDate.getTime();
		}
		else {
			merEntityCacheModel.createdDate = Long.MIN_VALUE;
		}

		merEntityCacheModel.isLock = getIsLock();

		return merEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{merEntityId=");
		sb.append(getMerEntityId());
		sb.append(", serialNumber=");
		sb.append(getSerialNumber());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", merId=");
		sb.append(getMerId());
		sb.append(", contractid=");
		sb.append(getContractid());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", warehouseId=");
		sb.append(getWarehouseId());
		sb.append(", constructionId=");
		sb.append(getConstructionId());
		sb.append(", isMerchandise=");
		sb.append(getIsMerchandise());
		sb.append(", statusId=");
		sb.append(getStatusId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", upgradeParentId=");
		sb.append(getUpgradeParentId());
		sb.append(", partNumber=");
		sb.append(getPartNumber());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", isTemp=");
		sb.append(getIsTemp());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", originalPrice=");
		sb.append(getOriginalPrice());
		sb.append(", managerName=");
		sb.append(getManagerName());
		sb.append(", isExpense=");
		sb.append(getIsExpense());
		sb.append(", useGroupId=");
		sb.append(getUseGroupId());
		sb.append(", keySearch=");
		sb.append(getKeySearch());
		sb.append(", contractCode=");
		sb.append(getContractCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", stationId=");
		sb.append(getStationId());
		sb.append(", isInventory=");
		sb.append(getIsInventory());
		sb.append(", entityType=");
		sb.append(getEntityType());
		sb.append(", quality=");
		sb.append(getQuality());
		sb.append(", catEmployeeId=");
		sb.append(getCatEmployeeId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", isLock=");
		sb.append(getIsLock());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ams.core.model.MerEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>merEntityId</column-name><column-value><![CDATA[");
		sb.append(getMerEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serialNumber</column-name><column-value><![CDATA[");
		sb.append(getSerialNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merId</column-name><column-value><![CDATA[");
		sb.append(getMerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractid</column-name><column-value><![CDATA[");
		sb.append(getContractid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>warehouseId</column-name><column-value><![CDATA[");
		sb.append(getWarehouseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionId</column-name><column-value><![CDATA[");
		sb.append(getConstructionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMerchandise</column-name><column-value><![CDATA[");
		sb.append(getIsMerchandise());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upgradeParentId</column-name><column-value><![CDATA[");
		sb.append(getUpgradeParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partNumber</column-name><column-value><![CDATA[");
		sb.append(getPartNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isTemp</column-name><column-value><![CDATA[");
		sb.append(getIsTemp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalPrice</column-name><column-value><![CDATA[");
		sb.append(getOriginalPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerName</column-name><column-value><![CDATA[");
		sb.append(getManagerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isExpense</column-name><column-value><![CDATA[");
		sb.append(getIsExpense());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useGroupId</column-name><column-value><![CDATA[");
		sb.append(getUseGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keySearch</column-name><column-value><![CDATA[");
		sb.append(getKeySearch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractCode</column-name><column-value><![CDATA[");
		sb.append(getContractCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stationId</column-name><column-value><![CDATA[");
		sb.append(getStationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isInventory</column-name><column-value><![CDATA[");
		sb.append(getIsInventory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityType</column-name><column-value><![CDATA[");
		sb.append(getEntityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quality</column-name><column-value><![CDATA[");
		sb.append(getQuality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getCatEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLock</column-name><column-value><![CDATA[");
		sb.append(getIsLock());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MerEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MerEntity.class
		};
	private long _merEntityId;
	private long _originalMerEntityId;
	private boolean _setOriginalMerEntityId;
	private String _serialNumber;
	private Double _unitPrice;
	private Long _merId;
	private Long _contractid;
	private Long _groupId;
	private Long _warehouseId;
	private Long _constructionId;
	private Long _isMerchandise;
	private Long _statusId;
	private Long _parentId;
	private Long _userId;
	private Long _upgradeParentId;
	private String _partNumber;
	private Double _count;
	private Long _isTemp;
	private String _path;
	private Double _originalPrice;
	private String _managerName;
	private Long _isExpense;
	private Long _useGroupId;
	private Long _keySearch;
	private String _contractCode;
	private String _description;
	private Long _stationId;
	private Long _isInventory;
	private Long _entityType;
	private Long _quality;
	private Long _catEmployeeId;
	private Date _createdDate;
	private Long _isLock;
	private long _columnBitmask;
	private MerEntity _escapedModel;
}