/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ams.core.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.viettel.ams.core.model.AssetManageReqEntity;
import com.viettel.ams.core.service.AssetManageReqEntityLocalService;
import com.viettel.ams.core.service.persistence.AssetManageReqEntityPersistence;
import com.viettel.ams.core.service.persistence.AssetManageReqFinder;
import com.viettel.ams.core.service.persistence.AssetManageReqHandleEntityPersistence;
import com.viettel.ams.core.service.persistence.AssetManageReqHandlePersistence;
import com.viettel.ams.core.service.persistence.AssetManageReqPersistence;
import com.viettel.ams.core.service.persistence.MerEntityFinder;
import com.viettel.ams.core.service.persistence.MerEntityPersistence;
import com.viettel.ams.core.service.persistence.SysGroupPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the asset manage req entity local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.viettel.ams.core.service.impl.AssetManageReqEntityLocalServiceImpl}.
 * </p>
 *
 * @author MrNet
 * @see com.viettel.ams.core.service.impl.AssetManageReqEntityLocalServiceImpl
 * @see com.viettel.ams.core.service.AssetManageReqEntityLocalServiceUtil
 * @generated
 */
public abstract class AssetManageReqEntityLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AssetManageReqEntityLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.viettel.ams.core.service.AssetManageReqEntityLocalServiceUtil} to access the asset manage req entity local service.
	 */

	/**
	 * Adds the asset manage req entity to the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetManageReqEntity the asset manage req entity
	 * @return the asset manage req entity that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetManageReqEntity addAssetManageReqEntity(
		AssetManageReqEntity assetManageReqEntity) throws SystemException {
		assetManageReqEntity.setNew(true);

		return assetManageReqEntityPersistence.update(assetManageReqEntity);
	}

	/**
	 * Creates a new asset manage req entity with the primary key. Does not add the asset manage req entity to the database.
	 *
	 * @param id the primary key for the new asset manage req entity
	 * @return the new asset manage req entity
	 */
	@Override
	public AssetManageReqEntity createAssetManageReqEntity(long id) {
		return assetManageReqEntityPersistence.create(id);
	}

	/**
	 * Deletes the asset manage req entity with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the asset manage req entity
	 * @return the asset manage req entity that was removed
	 * @throws PortalException if a asset manage req entity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetManageReqEntity deleteAssetManageReqEntity(long id)
		throws PortalException, SystemException {
		return assetManageReqEntityPersistence.remove(id);
	}

	/**
	 * Deletes the asset manage req entity from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetManageReqEntity the asset manage req entity
	 * @return the asset manage req entity that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetManageReqEntity deleteAssetManageReqEntity(
		AssetManageReqEntity assetManageReqEntity) throws SystemException {
		return assetManageReqEntityPersistence.remove(assetManageReqEntity);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AssetManageReqEntity.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return assetManageReqEntityPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.viettel.ams.core.model.impl.AssetManageReqEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return assetManageReqEntityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.viettel.ams.core.model.impl.AssetManageReqEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return assetManageReqEntityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return assetManageReqEntityPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return assetManageReqEntityPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AssetManageReqEntity fetchAssetManageReqEntity(long id)
		throws SystemException {
		return assetManageReqEntityPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the asset manage req entity with the primary key.
	 *
	 * @param id the primary key of the asset manage req entity
	 * @return the asset manage req entity
	 * @throws PortalException if a asset manage req entity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AssetManageReqEntity getAssetManageReqEntity(long id)
		throws PortalException, SystemException {
		return assetManageReqEntityPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return assetManageReqEntityPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the asset manage req entities.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.viettel.ams.core.model.impl.AssetManageReqEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of asset manage req entities
	 * @param end the upper bound of the range of asset manage req entities (not inclusive)
	 * @return the range of asset manage req entities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<AssetManageReqEntity> getAssetManageReqEntities(int start,
		int end) throws SystemException {
		return assetManageReqEntityPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of asset manage req entities.
	 *
	 * @return the number of asset manage req entities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getAssetManageReqEntitiesCount() throws SystemException {
		return assetManageReqEntityPersistence.countAll();
	}

	/**
	 * Updates the asset manage req entity in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param assetManageReqEntity the asset manage req entity
	 * @return the asset manage req entity that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetManageReqEntity updateAssetManageReqEntity(
		AssetManageReqEntity assetManageReqEntity) throws SystemException {
		return assetManageReqEntityPersistence.update(assetManageReqEntity);
	}

	/**
	 * Returns the asset manage req local service.
	 *
	 * @return the asset manage req local service
	 */
	public com.viettel.ams.core.service.AssetManageReqLocalService getAssetManageReqLocalService() {
		return assetManageReqLocalService;
	}

	/**
	 * Sets the asset manage req local service.
	 *
	 * @param assetManageReqLocalService the asset manage req local service
	 */
	public void setAssetManageReqLocalService(
		com.viettel.ams.core.service.AssetManageReqLocalService assetManageReqLocalService) {
		this.assetManageReqLocalService = assetManageReqLocalService;
	}

	/**
	 * Returns the asset manage req remote service.
	 *
	 * @return the asset manage req remote service
	 */
	public com.viettel.ams.core.service.AssetManageReqService getAssetManageReqService() {
		return assetManageReqService;
	}

	/**
	 * Sets the asset manage req remote service.
	 *
	 * @param assetManageReqService the asset manage req remote service
	 */
	public void setAssetManageReqService(
		com.viettel.ams.core.service.AssetManageReqService assetManageReqService) {
		this.assetManageReqService = assetManageReqService;
	}

	/**
	 * Returns the asset manage req persistence.
	 *
	 * @return the asset manage req persistence
	 */
	public AssetManageReqPersistence getAssetManageReqPersistence() {
		return assetManageReqPersistence;
	}

	/**
	 * Sets the asset manage req persistence.
	 *
	 * @param assetManageReqPersistence the asset manage req persistence
	 */
	public void setAssetManageReqPersistence(
		AssetManageReqPersistence assetManageReqPersistence) {
		this.assetManageReqPersistence = assetManageReqPersistence;
	}

	/**
	 * Returns the asset manage req finder.
	 *
	 * @return the asset manage req finder
	 */
	public AssetManageReqFinder getAssetManageReqFinder() {
		return assetManageReqFinder;
	}

	/**
	 * Sets the asset manage req finder.
	 *
	 * @param assetManageReqFinder the asset manage req finder
	 */
	public void setAssetManageReqFinder(
		AssetManageReqFinder assetManageReqFinder) {
		this.assetManageReqFinder = assetManageReqFinder;
	}

	/**
	 * Returns the asset manage req entity local service.
	 *
	 * @return the asset manage req entity local service
	 */
	public com.viettel.ams.core.service.AssetManageReqEntityLocalService getAssetManageReqEntityLocalService() {
		return assetManageReqEntityLocalService;
	}

	/**
	 * Sets the asset manage req entity local service.
	 *
	 * @param assetManageReqEntityLocalService the asset manage req entity local service
	 */
	public void setAssetManageReqEntityLocalService(
		com.viettel.ams.core.service.AssetManageReqEntityLocalService assetManageReqEntityLocalService) {
		this.assetManageReqEntityLocalService = assetManageReqEntityLocalService;
	}

	/**
	 * Returns the asset manage req entity remote service.
	 *
	 * @return the asset manage req entity remote service
	 */
	public com.viettel.ams.core.service.AssetManageReqEntityService getAssetManageReqEntityService() {
		return assetManageReqEntityService;
	}

	/**
	 * Sets the asset manage req entity remote service.
	 *
	 * @param assetManageReqEntityService the asset manage req entity remote service
	 */
	public void setAssetManageReqEntityService(
		com.viettel.ams.core.service.AssetManageReqEntityService assetManageReqEntityService) {
		this.assetManageReqEntityService = assetManageReqEntityService;
	}

	/**
	 * Returns the asset manage req entity persistence.
	 *
	 * @return the asset manage req entity persistence
	 */
	public AssetManageReqEntityPersistence getAssetManageReqEntityPersistence() {
		return assetManageReqEntityPersistence;
	}

	/**
	 * Sets the asset manage req entity persistence.
	 *
	 * @param assetManageReqEntityPersistence the asset manage req entity persistence
	 */
	public void setAssetManageReqEntityPersistence(
		AssetManageReqEntityPersistence assetManageReqEntityPersistence) {
		this.assetManageReqEntityPersistence = assetManageReqEntityPersistence;
	}

	/**
	 * Returns the asset manage req handle local service.
	 *
	 * @return the asset manage req handle local service
	 */
	public com.viettel.ams.core.service.AssetManageReqHandleLocalService getAssetManageReqHandleLocalService() {
		return assetManageReqHandleLocalService;
	}

	/**
	 * Sets the asset manage req handle local service.
	 *
	 * @param assetManageReqHandleLocalService the asset manage req handle local service
	 */
	public void setAssetManageReqHandleLocalService(
		com.viettel.ams.core.service.AssetManageReqHandleLocalService assetManageReqHandleLocalService) {
		this.assetManageReqHandleLocalService = assetManageReqHandleLocalService;
	}

	/**
	 * Returns the asset manage req handle remote service.
	 *
	 * @return the asset manage req handle remote service
	 */
	public com.viettel.ams.core.service.AssetManageReqHandleService getAssetManageReqHandleService() {
		return assetManageReqHandleService;
	}

	/**
	 * Sets the asset manage req handle remote service.
	 *
	 * @param assetManageReqHandleService the asset manage req handle remote service
	 */
	public void setAssetManageReqHandleService(
		com.viettel.ams.core.service.AssetManageReqHandleService assetManageReqHandleService) {
		this.assetManageReqHandleService = assetManageReqHandleService;
	}

	/**
	 * Returns the asset manage req handle persistence.
	 *
	 * @return the asset manage req handle persistence
	 */
	public AssetManageReqHandlePersistence getAssetManageReqHandlePersistence() {
		return assetManageReqHandlePersistence;
	}

	/**
	 * Sets the asset manage req handle persistence.
	 *
	 * @param assetManageReqHandlePersistence the asset manage req handle persistence
	 */
	public void setAssetManageReqHandlePersistence(
		AssetManageReqHandlePersistence assetManageReqHandlePersistence) {
		this.assetManageReqHandlePersistence = assetManageReqHandlePersistence;
	}

	/**
	 * Returns the asset manage req handle entity local service.
	 *
	 * @return the asset manage req handle entity local service
	 */
	public com.viettel.ams.core.service.AssetManageReqHandleEntityLocalService getAssetManageReqHandleEntityLocalService() {
		return assetManageReqHandleEntityLocalService;
	}

	/**
	 * Sets the asset manage req handle entity local service.
	 *
	 * @param assetManageReqHandleEntityLocalService the asset manage req handle entity local service
	 */
	public void setAssetManageReqHandleEntityLocalService(
		com.viettel.ams.core.service.AssetManageReqHandleEntityLocalService assetManageReqHandleEntityLocalService) {
		this.assetManageReqHandleEntityLocalService = assetManageReqHandleEntityLocalService;
	}

	/**
	 * Returns the asset manage req handle entity remote service.
	 *
	 * @return the asset manage req handle entity remote service
	 */
	public com.viettel.ams.core.service.AssetManageReqHandleEntityService getAssetManageReqHandleEntityService() {
		return assetManageReqHandleEntityService;
	}

	/**
	 * Sets the asset manage req handle entity remote service.
	 *
	 * @param assetManageReqHandleEntityService the asset manage req handle entity remote service
	 */
	public void setAssetManageReqHandleEntityService(
		com.viettel.ams.core.service.AssetManageReqHandleEntityService assetManageReqHandleEntityService) {
		this.assetManageReqHandleEntityService = assetManageReqHandleEntityService;
	}

	/**
	 * Returns the asset manage req handle entity persistence.
	 *
	 * @return the asset manage req handle entity persistence
	 */
	public AssetManageReqHandleEntityPersistence getAssetManageReqHandleEntityPersistence() {
		return assetManageReqHandleEntityPersistence;
	}

	/**
	 * Sets the asset manage req handle entity persistence.
	 *
	 * @param assetManageReqHandleEntityPersistence the asset manage req handle entity persistence
	 */
	public void setAssetManageReqHandleEntityPersistence(
		AssetManageReqHandleEntityPersistence assetManageReqHandleEntityPersistence) {
		this.assetManageReqHandleEntityPersistence = assetManageReqHandleEntityPersistence;
	}

	/**
	 * Returns the mer entity local service.
	 *
	 * @return the mer entity local service
	 */
	public com.viettel.ams.core.service.MerEntityLocalService getMerEntityLocalService() {
		return merEntityLocalService;
	}

	/**
	 * Sets the mer entity local service.
	 *
	 * @param merEntityLocalService the mer entity local service
	 */
	public void setMerEntityLocalService(
		com.viettel.ams.core.service.MerEntityLocalService merEntityLocalService) {
		this.merEntityLocalService = merEntityLocalService;
	}

	/**
	 * Returns the mer entity remote service.
	 *
	 * @return the mer entity remote service
	 */
	public com.viettel.ams.core.service.MerEntityService getMerEntityService() {
		return merEntityService;
	}

	/**
	 * Sets the mer entity remote service.
	 *
	 * @param merEntityService the mer entity remote service
	 */
	public void setMerEntityService(
		com.viettel.ams.core.service.MerEntityService merEntityService) {
		this.merEntityService = merEntityService;
	}

	/**
	 * Returns the mer entity persistence.
	 *
	 * @return the mer entity persistence
	 */
	public MerEntityPersistence getMerEntityPersistence() {
		return merEntityPersistence;
	}

	/**
	 * Sets the mer entity persistence.
	 *
	 * @param merEntityPersistence the mer entity persistence
	 */
	public void setMerEntityPersistence(
		MerEntityPersistence merEntityPersistence) {
		this.merEntityPersistence = merEntityPersistence;
	}

	/**
	 * Returns the mer entity finder.
	 *
	 * @return the mer entity finder
	 */
	public MerEntityFinder getMerEntityFinder() {
		return merEntityFinder;
	}

	/**
	 * Sets the mer entity finder.
	 *
	 * @param merEntityFinder the mer entity finder
	 */
	public void setMerEntityFinder(MerEntityFinder merEntityFinder) {
		this.merEntityFinder = merEntityFinder;
	}

	/**
	 * Returns the sys group local service.
	 *
	 * @return the sys group local service
	 */
	public com.viettel.ams.core.service.SysGroupLocalService getSysGroupLocalService() {
		return sysGroupLocalService;
	}

	/**
	 * Sets the sys group local service.
	 *
	 * @param sysGroupLocalService the sys group local service
	 */
	public void setSysGroupLocalService(
		com.viettel.ams.core.service.SysGroupLocalService sysGroupLocalService) {
		this.sysGroupLocalService = sysGroupLocalService;
	}

	/**
	 * Returns the sys group remote service.
	 *
	 * @return the sys group remote service
	 */
	public com.viettel.ams.core.service.SysGroupService getSysGroupService() {
		return sysGroupService;
	}

	/**
	 * Sets the sys group remote service.
	 *
	 * @param sysGroupService the sys group remote service
	 */
	public void setSysGroupService(
		com.viettel.ams.core.service.SysGroupService sysGroupService) {
		this.sysGroupService = sysGroupService;
	}

	/**
	 * Returns the sys group persistence.
	 *
	 * @return the sys group persistence
	 */
	public SysGroupPersistence getSysGroupPersistence() {
		return sysGroupPersistence;
	}

	/**
	 * Sets the sys group persistence.
	 *
	 * @param sysGroupPersistence the sys group persistence
	 */
	public void setSysGroupPersistence(SysGroupPersistence sysGroupPersistence) {
		this.sysGroupPersistence = sysGroupPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.viettel.ams.core.model.AssetManageReqEntity",
			assetManageReqEntityLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.viettel.ams.core.model.AssetManageReqEntity");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return AssetManageReqEntity.class;
	}

	protected String getModelClassName() {
		return AssetManageReqEntity.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = assetManageReqEntityPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqLocalService.class)
	protected com.viettel.ams.core.service.AssetManageReqLocalService assetManageReqLocalService;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqService.class)
	protected com.viettel.ams.core.service.AssetManageReqService assetManageReqService;
	@BeanReference(type = AssetManageReqPersistence.class)
	protected AssetManageReqPersistence assetManageReqPersistence;
	@BeanReference(type = AssetManageReqFinder.class)
	protected AssetManageReqFinder assetManageReqFinder;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqEntityLocalService.class)
	protected com.viettel.ams.core.service.AssetManageReqEntityLocalService assetManageReqEntityLocalService;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqEntityService.class)
	protected com.viettel.ams.core.service.AssetManageReqEntityService assetManageReqEntityService;
	@BeanReference(type = AssetManageReqEntityPersistence.class)
	protected AssetManageReqEntityPersistence assetManageReqEntityPersistence;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqHandleLocalService.class)
	protected com.viettel.ams.core.service.AssetManageReqHandleLocalService assetManageReqHandleLocalService;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqHandleService.class)
	protected com.viettel.ams.core.service.AssetManageReqHandleService assetManageReqHandleService;
	@BeanReference(type = AssetManageReqHandlePersistence.class)
	protected AssetManageReqHandlePersistence assetManageReqHandlePersistence;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqHandleEntityLocalService.class)
	protected com.viettel.ams.core.service.AssetManageReqHandleEntityLocalService assetManageReqHandleEntityLocalService;
	@BeanReference(type = com.viettel.ams.core.service.AssetManageReqHandleEntityService.class)
	protected com.viettel.ams.core.service.AssetManageReqHandleEntityService assetManageReqHandleEntityService;
	@BeanReference(type = AssetManageReqHandleEntityPersistence.class)
	protected AssetManageReqHandleEntityPersistence assetManageReqHandleEntityPersistence;
	@BeanReference(type = com.viettel.ams.core.service.MerEntityLocalService.class)
	protected com.viettel.ams.core.service.MerEntityLocalService merEntityLocalService;
	@BeanReference(type = com.viettel.ams.core.service.MerEntityService.class)
	protected com.viettel.ams.core.service.MerEntityService merEntityService;
	@BeanReference(type = MerEntityPersistence.class)
	protected MerEntityPersistence merEntityPersistence;
	@BeanReference(type = MerEntityFinder.class)
	protected MerEntityFinder merEntityFinder;
	@BeanReference(type = com.viettel.ams.core.service.SysGroupLocalService.class)
	protected com.viettel.ams.core.service.SysGroupLocalService sysGroupLocalService;
	@BeanReference(type = com.viettel.ams.core.service.SysGroupService.class)
	protected com.viettel.ams.core.service.SysGroupService sysGroupService;
	@BeanReference(type = SysGroupPersistence.class)
	protected SysGroupPersistence sysGroupPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private AssetManageReqEntityLocalServiceClpInvoker _clpInvoker = new AssetManageReqEntityLocalServiceClpInvoker();
}