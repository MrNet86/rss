/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ams.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ams.core.model.AssetManageReqHandle;
import com.viettel.ams.core.model.AssetManageReqHandleModel;
import com.viettel.ams.core.model.AssetManageReqHandleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssetManageReqHandle service. Represents a row in the &quot;Asset_Manage_Req_Handle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ams.core.model.AssetManageReqHandleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetManageReqHandleImpl}.
 * </p>
 *
 * @author MrNet
 * @see AssetManageReqHandleImpl
 * @see com.viettel.ams.core.model.AssetManageReqHandle
 * @see com.viettel.ams.core.model.AssetManageReqHandleModel
 * @generated
 */
@JSON(strict = true)
public class AssetManageReqHandleModelImpl extends BaseModelImpl<AssetManageReqHandle>
	implements AssetManageReqHandleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset manage req handle model instance should use the {@link com.viettel.ams.core.model.AssetManageReqHandle} interface instead.
	 */
	public static final String TABLE_NAME = "Asset_Manage_Req_Handle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "HANDLE_ID", Types.BIGINT },
			{ "MANAGE_REQ_ID", Types.BIGINT },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "UPDATOR_ID", Types.BIGINT },
			{ "UPDATE_DATE", Types.TIMESTAMP },
			{ "STATUS", Types.BIGINT },
			{ "CODE", Types.VARCHAR },
			{ "CREATE_GROUP_ID", Types.BIGINT },
			{ "IMP_REQ_ID", Types.BIGINT },
			{ "REQ_DELEGATOR", Types.VARCHAR },
			{ "REQ_DELEGATOR_POSITION", Types.VARCHAR },
			{ "DOCUMENT", Types.VARCHAR },
			{ "BEGIN_DATE", Types.TIMESTAMP },
			{ "END_DATE", Types.TIMESTAMP },
			{ "KCS_CODE", Types.VARCHAR },
			{ "HAND_OVER_ID", Types.BIGINT },
			{ "IMP_REQ_CODE", Types.VARCHAR },
			{ "BASE_KCS_CODE", Types.BIGINT },
			{ "CREATOR_KCS", Types.BIGINT },
			{ "ASSET_TYPE", Types.BIGINT },
			{ "IS_NOT_MODIFY", Types.BIGINT },
			{ "HANDLE_DELEGATOR", Types.VARCHAR },
			{ "HANDLE_DELEGATOR_POSITION", Types.VARCHAR },
			{ "CONTRACT_ID", Types.BIGINT },
			{ "STATUS_CA", Types.BIGINT },
			{ "COMMENT_CA", Types.VARCHAR },
			{ "DOCUMENT_CA_ID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Asset_Manage_Req_Handle (HANDLE_ID LONG not null primary key,MANAGE_REQ_ID LONG,DESCRIPTION VARCHAR(75) null,UPDATOR_ID LONG,UPDATE_DATE DATE null,STATUS LONG,CODE VARCHAR(75) null,CREATE_GROUP_ID LONG,IMP_REQ_ID LONG,REQ_DELEGATOR VARCHAR(75) null,REQ_DELEGATOR_POSITION VARCHAR(75) null,DOCUMENT VARCHAR(75) null,BEGIN_DATE DATE null,END_DATE DATE null,KCS_CODE VARCHAR(75) null,HAND_OVER_ID LONG,IMP_REQ_CODE VARCHAR(75) null,BASE_KCS_CODE LONG,CREATOR_KCS LONG,ASSET_TYPE LONG,IS_NOT_MODIFY LONG,HANDLE_DELEGATOR VARCHAR(75) null,HANDLE_DELEGATOR_POSITION VARCHAR(75) null,CONTRACT_ID LONG,STATUS_CA LONG,COMMENT_CA VARCHAR(75) null,DOCUMENT_CA_ID LONG)";
	public static final String TABLE_SQL_DROP = "drop table Asset_Manage_Req_Handle";
	public static final String ORDER_BY_JPQL = " ORDER BY assetManageReqHandle.handleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Asset_Manage_Req_Handle.HANDLE_ID ASC";
	public static final String DATA_SOURCE = "amsDataSource";
	public static final String SESSION_FACTORY = "amsSessionFactory";
	public static final String TX_MANAGER = "amsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ams.core.model.AssetManageReqHandle"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ams.core.model.AssetManageReqHandle"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetManageReqHandle toModel(
		AssetManageReqHandleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssetManageReqHandle model = new AssetManageReqHandleImpl();

		model.setHandleId(soapModel.getHandleId());
		model.setManageReqId(soapModel.getManageReqId());
		model.setDescription(soapModel.getDescription());
		model.setUpdatorId(soapModel.getUpdatorId());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setStatus(soapModel.getStatus());
		model.setCode(soapModel.getCode());
		model.setCreateGroupId(soapModel.getCreateGroupId());
		model.setImpReqId(soapModel.getImpReqId());
		model.setReqDelegator(soapModel.getReqDelegator());
		model.setReqDelegatorPosition(soapModel.getReqDelegatorPosition());
		model.setDocument(soapModel.getDocument());
		model.setBeginDate(soapModel.getBeginDate());
		model.setEndDate(soapModel.getEndDate());
		model.setKcsCode(soapModel.getKcsCode());
		model.setHandOverId(soapModel.getHandOverId());
		model.setImpReqCode(soapModel.getImpReqCode());
		model.setBaseKcsCode(soapModel.getBaseKcsCode());
		model.setCreatorKcs(soapModel.getCreatorKcs());
		model.setAssetType(soapModel.getAssetType());
		model.setIsNotModify(soapModel.getIsNotModify());
		model.setHandleDelegator(soapModel.getHandleDelegator());
		model.setHandleDelegatorPosition(soapModel.getHandleDelegatorPosition());
		model.setContractId(soapModel.getContractId());
		model.setStatusCa(soapModel.getStatusCa());
		model.setCommentCa(soapModel.getCommentCa());
		model.setDocumentCaId(soapModel.getDocumentCaId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetManageReqHandle> toModels(
		AssetManageReqHandleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssetManageReqHandle> models = new ArrayList<AssetManageReqHandle>(soapModels.length);

		for (AssetManageReqHandleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ams.core.model.AssetManageReqHandle"));

	public AssetManageReqHandleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _handleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHandleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _handleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetManageReqHandle.class;
	}

	@Override
	public String getModelClassName() {
		return AssetManageReqHandle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("handleId", getHandleId());
		attributes.put("manageReqId", getManageReqId());
		attributes.put("description", getDescription());
		attributes.put("updatorId", getUpdatorId());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("status", getStatus());
		attributes.put("code", getCode());
		attributes.put("createGroupId", getCreateGroupId());
		attributes.put("impReqId", getImpReqId());
		attributes.put("reqDelegator", getReqDelegator());
		attributes.put("reqDelegatorPosition", getReqDelegatorPosition());
		attributes.put("document", getDocument());
		attributes.put("beginDate", getBeginDate());
		attributes.put("endDate", getEndDate());
		attributes.put("kcsCode", getKcsCode());
		attributes.put("handOverId", getHandOverId());
		attributes.put("impReqCode", getImpReqCode());
		attributes.put("baseKcsCode", getBaseKcsCode());
		attributes.put("creatorKcs", getCreatorKcs());
		attributes.put("assetType", getAssetType());
		attributes.put("isNotModify", getIsNotModify());
		attributes.put("handleDelegator", getHandleDelegator());
		attributes.put("handleDelegatorPosition", getHandleDelegatorPosition());
		attributes.put("contractId", getContractId());
		attributes.put("statusCa", getStatusCa());
		attributes.put("commentCa", getCommentCa());
		attributes.put("documentCaId", getDocumentCaId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long handleId = (Long)attributes.get("handleId");

		if (handleId != null) {
			setHandleId(handleId);
		}

		Long manageReqId = (Long)attributes.get("manageReqId");

		if (manageReqId != null) {
			setManageReqId(manageReqId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long updatorId = (Long)attributes.get("updatorId");

		if (updatorId != null) {
			setUpdatorId(updatorId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long createGroupId = (Long)attributes.get("createGroupId");

		if (createGroupId != null) {
			setCreateGroupId(createGroupId);
		}

		Long impReqId = (Long)attributes.get("impReqId");

		if (impReqId != null) {
			setImpReqId(impReqId);
		}

		String reqDelegator = (String)attributes.get("reqDelegator");

		if (reqDelegator != null) {
			setReqDelegator(reqDelegator);
		}

		String reqDelegatorPosition = (String)attributes.get(
				"reqDelegatorPosition");

		if (reqDelegatorPosition != null) {
			setReqDelegatorPosition(reqDelegatorPosition);
		}

		String document = (String)attributes.get("document");

		if (document != null) {
			setDocument(document);
		}

		Date beginDate = (Date)attributes.get("beginDate");

		if (beginDate != null) {
			setBeginDate(beginDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String kcsCode = (String)attributes.get("kcsCode");

		if (kcsCode != null) {
			setKcsCode(kcsCode);
		}

		Long handOverId = (Long)attributes.get("handOverId");

		if (handOverId != null) {
			setHandOverId(handOverId);
		}

		String impReqCode = (String)attributes.get("impReqCode");

		if (impReqCode != null) {
			setImpReqCode(impReqCode);
		}

		Long baseKcsCode = (Long)attributes.get("baseKcsCode");

		if (baseKcsCode != null) {
			setBaseKcsCode(baseKcsCode);
		}

		Long creatorKcs = (Long)attributes.get("creatorKcs");

		if (creatorKcs != null) {
			setCreatorKcs(creatorKcs);
		}

		Long assetType = (Long)attributes.get("assetType");

		if (assetType != null) {
			setAssetType(assetType);
		}

		Long isNotModify = (Long)attributes.get("isNotModify");

		if (isNotModify != null) {
			setIsNotModify(isNotModify);
		}

		String handleDelegator = (String)attributes.get("handleDelegator");

		if (handleDelegator != null) {
			setHandleDelegator(handleDelegator);
		}

		String handleDelegatorPosition = (String)attributes.get(
				"handleDelegatorPosition");

		if (handleDelegatorPosition != null) {
			setHandleDelegatorPosition(handleDelegatorPosition);
		}

		Long contractId = (Long)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		Long statusCa = (Long)attributes.get("statusCa");

		if (statusCa != null) {
			setStatusCa(statusCa);
		}

		String commentCa = (String)attributes.get("commentCa");

		if (commentCa != null) {
			setCommentCa(commentCa);
		}

		Long documentCaId = (Long)attributes.get("documentCaId");

		if (documentCaId != null) {
			setDocumentCaId(documentCaId);
		}
	}

	@JSON
	@Override
	public long getHandleId() {
		return _handleId;
	}

	@Override
	public void setHandleId(long handleId) {
		_handleId = handleId;
	}

	@JSON
	@Override
	public Long getManageReqId() {
		return _manageReqId;
	}

	@Override
	public void setManageReqId(Long manageReqId) {
		_manageReqId = manageReqId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Long getUpdatorId() {
		return _updatorId;
	}

	@Override
	public void setUpdatorId(Long updatorId) {
		_updatorId = updatorId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@JSON
	@Override
	public Long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(Long status) {
		_status = status;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public Long getCreateGroupId() {
		return _createGroupId;
	}

	@Override
	public void setCreateGroupId(Long createGroupId) {
		_createGroupId = createGroupId;
	}

	@JSON
	@Override
	public Long getImpReqId() {
		return _impReqId;
	}

	@Override
	public void setImpReqId(Long impReqId) {
		_impReqId = impReqId;
	}

	@JSON
	@Override
	public String getReqDelegator() {
		if (_reqDelegator == null) {
			return StringPool.BLANK;
		}
		else {
			return _reqDelegator;
		}
	}

	@Override
	public void setReqDelegator(String reqDelegator) {
		_reqDelegator = reqDelegator;
	}

	@JSON
	@Override
	public String getReqDelegatorPosition() {
		if (_reqDelegatorPosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _reqDelegatorPosition;
		}
	}

	@Override
	public void setReqDelegatorPosition(String reqDelegatorPosition) {
		_reqDelegatorPosition = reqDelegatorPosition;
	}

	@JSON
	@Override
	public String getDocument() {
		if (_document == null) {
			return StringPool.BLANK;
		}
		else {
			return _document;
		}
	}

	@Override
	public void setDocument(String document) {
		_document = document;
	}

	@JSON
	@Override
	public Date getBeginDate() {
		return _beginDate;
	}

	@Override
	public void setBeginDate(Date beginDate) {
		_beginDate = beginDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getKcsCode() {
		if (_kcsCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _kcsCode;
		}
	}

	@Override
	public void setKcsCode(String kcsCode) {
		_kcsCode = kcsCode;
	}

	@JSON
	@Override
	public Long getHandOverId() {
		return _handOverId;
	}

	@Override
	public void setHandOverId(Long handOverId) {
		_handOverId = handOverId;
	}

	@JSON
	@Override
	public String getImpReqCode() {
		if (_impReqCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _impReqCode;
		}
	}

	@Override
	public void setImpReqCode(String impReqCode) {
		_impReqCode = impReqCode;
	}

	@JSON
	@Override
	public Long getBaseKcsCode() {
		return _baseKcsCode;
	}

	@Override
	public void setBaseKcsCode(Long baseKcsCode) {
		_baseKcsCode = baseKcsCode;
	}

	@JSON
	@Override
	public Long getCreatorKcs() {
		return _creatorKcs;
	}

	@Override
	public void setCreatorKcs(Long creatorKcs) {
		_creatorKcs = creatorKcs;
	}

	@JSON
	@Override
	public Long getAssetType() {
		return _assetType;
	}

	@Override
	public void setAssetType(Long assetType) {
		_assetType = assetType;
	}

	@JSON
	@Override
	public Long getIsNotModify() {
		return _isNotModify;
	}

	@Override
	public void setIsNotModify(Long isNotModify) {
		_isNotModify = isNotModify;
	}

	@JSON
	@Override
	public String getHandleDelegator() {
		if (_handleDelegator == null) {
			return StringPool.BLANK;
		}
		else {
			return _handleDelegator;
		}
	}

	@Override
	public void setHandleDelegator(String handleDelegator) {
		_handleDelegator = handleDelegator;
	}

	@JSON
	@Override
	public String getHandleDelegatorPosition() {
		if (_handleDelegatorPosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _handleDelegatorPosition;
		}
	}

	@Override
	public void setHandleDelegatorPosition(String handleDelegatorPosition) {
		_handleDelegatorPosition = handleDelegatorPosition;
	}

	@JSON
	@Override
	public Long getContractId() {
		return _contractId;
	}

	@Override
	public void setContractId(Long contractId) {
		_contractId = contractId;
	}

	@JSON
	@Override
	public Long getStatusCa() {
		return _statusCa;
	}

	@Override
	public void setStatusCa(Long statusCa) {
		_statusCa = statusCa;
	}

	@JSON
	@Override
	public String getCommentCa() {
		if (_commentCa == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentCa;
		}
	}

	@Override
	public void setCommentCa(String commentCa) {
		_commentCa = commentCa;
	}

	@JSON
	@Override
	public Long getDocumentCaId() {
		return _documentCaId;
	}

	@Override
	public void setDocumentCaId(Long documentCaId) {
		_documentCaId = documentCaId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetManageReqHandle.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetManageReqHandle toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetManageReqHandle)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetManageReqHandleImpl assetManageReqHandleImpl = new AssetManageReqHandleImpl();

		assetManageReqHandleImpl.setHandleId(getHandleId());
		assetManageReqHandleImpl.setManageReqId(getManageReqId());
		assetManageReqHandleImpl.setDescription(getDescription());
		assetManageReqHandleImpl.setUpdatorId(getUpdatorId());
		assetManageReqHandleImpl.setUpdateDate(getUpdateDate());
		assetManageReqHandleImpl.setStatus(getStatus());
		assetManageReqHandleImpl.setCode(getCode());
		assetManageReqHandleImpl.setCreateGroupId(getCreateGroupId());
		assetManageReqHandleImpl.setImpReqId(getImpReqId());
		assetManageReqHandleImpl.setReqDelegator(getReqDelegator());
		assetManageReqHandleImpl.setReqDelegatorPosition(getReqDelegatorPosition());
		assetManageReqHandleImpl.setDocument(getDocument());
		assetManageReqHandleImpl.setBeginDate(getBeginDate());
		assetManageReqHandleImpl.setEndDate(getEndDate());
		assetManageReqHandleImpl.setKcsCode(getKcsCode());
		assetManageReqHandleImpl.setHandOverId(getHandOverId());
		assetManageReqHandleImpl.setImpReqCode(getImpReqCode());
		assetManageReqHandleImpl.setBaseKcsCode(getBaseKcsCode());
		assetManageReqHandleImpl.setCreatorKcs(getCreatorKcs());
		assetManageReqHandleImpl.setAssetType(getAssetType());
		assetManageReqHandleImpl.setIsNotModify(getIsNotModify());
		assetManageReqHandleImpl.setHandleDelegator(getHandleDelegator());
		assetManageReqHandleImpl.setHandleDelegatorPosition(getHandleDelegatorPosition());
		assetManageReqHandleImpl.setContractId(getContractId());
		assetManageReqHandleImpl.setStatusCa(getStatusCa());
		assetManageReqHandleImpl.setCommentCa(getCommentCa());
		assetManageReqHandleImpl.setDocumentCaId(getDocumentCaId());

		assetManageReqHandleImpl.resetOriginalValues();

		return assetManageReqHandleImpl;
	}

	@Override
	public int compareTo(AssetManageReqHandle assetManageReqHandle) {
		long primaryKey = assetManageReqHandle.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetManageReqHandle)) {
			return false;
		}

		AssetManageReqHandle assetManageReqHandle = (AssetManageReqHandle)obj;

		long primaryKey = assetManageReqHandle.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AssetManageReqHandle> toCacheModel() {
		AssetManageReqHandleCacheModel assetManageReqHandleCacheModel = new AssetManageReqHandleCacheModel();

		assetManageReqHandleCacheModel.handleId = getHandleId();

		assetManageReqHandleCacheModel.manageReqId = getManageReqId();

		assetManageReqHandleCacheModel.description = getDescription();

		String description = assetManageReqHandleCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			assetManageReqHandleCacheModel.description = null;
		}

		assetManageReqHandleCacheModel.updatorId = getUpdatorId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			assetManageReqHandleCacheModel.updateDate = updateDate.getTime();
		}
		else {
			assetManageReqHandleCacheModel.updateDate = Long.MIN_VALUE;
		}

		assetManageReqHandleCacheModel.status = getStatus();

		assetManageReqHandleCacheModel.code = getCode();

		String code = assetManageReqHandleCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			assetManageReqHandleCacheModel.code = null;
		}

		assetManageReqHandleCacheModel.createGroupId = getCreateGroupId();

		assetManageReqHandleCacheModel.impReqId = getImpReqId();

		assetManageReqHandleCacheModel.reqDelegator = getReqDelegator();

		String reqDelegator = assetManageReqHandleCacheModel.reqDelegator;

		if ((reqDelegator != null) && (reqDelegator.length() == 0)) {
			assetManageReqHandleCacheModel.reqDelegator = null;
		}

		assetManageReqHandleCacheModel.reqDelegatorPosition = getReqDelegatorPosition();

		String reqDelegatorPosition = assetManageReqHandleCacheModel.reqDelegatorPosition;

		if ((reqDelegatorPosition != null) &&
				(reqDelegatorPosition.length() == 0)) {
			assetManageReqHandleCacheModel.reqDelegatorPosition = null;
		}

		assetManageReqHandleCacheModel.document = getDocument();

		String document = assetManageReqHandleCacheModel.document;

		if ((document != null) && (document.length() == 0)) {
			assetManageReqHandleCacheModel.document = null;
		}

		Date beginDate = getBeginDate();

		if (beginDate != null) {
			assetManageReqHandleCacheModel.beginDate = beginDate.getTime();
		}
		else {
			assetManageReqHandleCacheModel.beginDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			assetManageReqHandleCacheModel.endDate = endDate.getTime();
		}
		else {
			assetManageReqHandleCacheModel.endDate = Long.MIN_VALUE;
		}

		assetManageReqHandleCacheModel.kcsCode = getKcsCode();

		String kcsCode = assetManageReqHandleCacheModel.kcsCode;

		if ((kcsCode != null) && (kcsCode.length() == 0)) {
			assetManageReqHandleCacheModel.kcsCode = null;
		}

		assetManageReqHandleCacheModel.handOverId = getHandOverId();

		assetManageReqHandleCacheModel.impReqCode = getImpReqCode();

		String impReqCode = assetManageReqHandleCacheModel.impReqCode;

		if ((impReqCode != null) && (impReqCode.length() == 0)) {
			assetManageReqHandleCacheModel.impReqCode = null;
		}

		assetManageReqHandleCacheModel.baseKcsCode = getBaseKcsCode();

		assetManageReqHandleCacheModel.creatorKcs = getCreatorKcs();

		assetManageReqHandleCacheModel.assetType = getAssetType();

		assetManageReqHandleCacheModel.isNotModify = getIsNotModify();

		assetManageReqHandleCacheModel.handleDelegator = getHandleDelegator();

		String handleDelegator = assetManageReqHandleCacheModel.handleDelegator;

		if ((handleDelegator != null) && (handleDelegator.length() == 0)) {
			assetManageReqHandleCacheModel.handleDelegator = null;
		}

		assetManageReqHandleCacheModel.handleDelegatorPosition = getHandleDelegatorPosition();

		String handleDelegatorPosition = assetManageReqHandleCacheModel.handleDelegatorPosition;

		if ((handleDelegatorPosition != null) &&
				(handleDelegatorPosition.length() == 0)) {
			assetManageReqHandleCacheModel.handleDelegatorPosition = null;
		}

		assetManageReqHandleCacheModel.contractId = getContractId();

		assetManageReqHandleCacheModel.statusCa = getStatusCa();

		assetManageReqHandleCacheModel.commentCa = getCommentCa();

		String commentCa = assetManageReqHandleCacheModel.commentCa;

		if ((commentCa != null) && (commentCa.length() == 0)) {
			assetManageReqHandleCacheModel.commentCa = null;
		}

		assetManageReqHandleCacheModel.documentCaId = getDocumentCaId();

		return assetManageReqHandleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{handleId=");
		sb.append(getHandleId());
		sb.append(", manageReqId=");
		sb.append(getManageReqId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", updatorId=");
		sb.append(getUpdatorId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", createGroupId=");
		sb.append(getCreateGroupId());
		sb.append(", impReqId=");
		sb.append(getImpReqId());
		sb.append(", reqDelegator=");
		sb.append(getReqDelegator());
		sb.append(", reqDelegatorPosition=");
		sb.append(getReqDelegatorPosition());
		sb.append(", document=");
		sb.append(getDocument());
		sb.append(", beginDate=");
		sb.append(getBeginDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", kcsCode=");
		sb.append(getKcsCode());
		sb.append(", handOverId=");
		sb.append(getHandOverId());
		sb.append(", impReqCode=");
		sb.append(getImpReqCode());
		sb.append(", baseKcsCode=");
		sb.append(getBaseKcsCode());
		sb.append(", creatorKcs=");
		sb.append(getCreatorKcs());
		sb.append(", assetType=");
		sb.append(getAssetType());
		sb.append(", isNotModify=");
		sb.append(getIsNotModify());
		sb.append(", handleDelegator=");
		sb.append(getHandleDelegator());
		sb.append(", handleDelegatorPosition=");
		sb.append(getHandleDelegatorPosition());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", statusCa=");
		sb.append(getStatusCa());
		sb.append(", commentCa=");
		sb.append(getCommentCa());
		sb.append(", documentCaId=");
		sb.append(getDocumentCaId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ams.core.model.AssetManageReqHandle");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>handleId</column-name><column-value><![CDATA[");
		sb.append(getHandleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manageReqId</column-name><column-value><![CDATA[");
		sb.append(getManageReqId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatorId</column-name><column-value><![CDATA[");
		sb.append(getUpdatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createGroupId</column-name><column-value><![CDATA[");
		sb.append(getCreateGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impReqId</column-name><column-value><![CDATA[");
		sb.append(getImpReqId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reqDelegator</column-name><column-value><![CDATA[");
		sb.append(getReqDelegator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reqDelegatorPosition</column-name><column-value><![CDATA[");
		sb.append(getReqDelegatorPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>document</column-name><column-value><![CDATA[");
		sb.append(getDocument());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beginDate</column-name><column-value><![CDATA[");
		sb.append(getBeginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kcsCode</column-name><column-value><![CDATA[");
		sb.append(getKcsCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handOverId</column-name><column-value><![CDATA[");
		sb.append(getHandOverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impReqCode</column-name><column-value><![CDATA[");
		sb.append(getImpReqCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseKcsCode</column-name><column-value><![CDATA[");
		sb.append(getBaseKcsCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorKcs</column-name><column-value><![CDATA[");
		sb.append(getCreatorKcs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetType</column-name><column-value><![CDATA[");
		sb.append(getAssetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNotModify</column-name><column-value><![CDATA[");
		sb.append(getIsNotModify());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handleDelegator</column-name><column-value><![CDATA[");
		sb.append(getHandleDelegator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handleDelegatorPosition</column-name><column-value><![CDATA[");
		sb.append(getHandleDelegatorPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCa</column-name><column-value><![CDATA[");
		sb.append(getStatusCa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentCa</column-name><column-value><![CDATA[");
		sb.append(getCommentCa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentCaId</column-name><column-value><![CDATA[");
		sb.append(getDocumentCaId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssetManageReqHandle.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetManageReqHandle.class
		};
	private long _handleId;
	private Long _manageReqId;
	private String _description;
	private Long _updatorId;
	private Date _updateDate;
	private Long _status;
	private String _code;
	private Long _createGroupId;
	private Long _impReqId;
	private String _reqDelegator;
	private String _reqDelegatorPosition;
	private String _document;
	private Date _beginDate;
	private Date _endDate;
	private String _kcsCode;
	private Long _handOverId;
	private String _impReqCode;
	private Long _baseKcsCode;
	private Long _creatorKcs;
	private Long _assetType;
	private Long _isNotModify;
	private String _handleDelegator;
	private String _handleDelegatorPosition;
	private Long _contractId;
	private Long _statusCa;
	private String _commentCa;
	private Long _documentCaId;
	private AssetManageReqHandle _escapedModel;
}