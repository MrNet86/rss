/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ams.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ams.core.model.AssetManageReqHandleEntity;
import com.viettel.ams.core.model.AssetManageReqHandleEntityModel;
import com.viettel.ams.core.model.AssetManageReqHandleEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssetManageReqHandleEntity service. Represents a row in the &quot;Asset_Manage_Req_Handle_Entity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ams.core.model.AssetManageReqHandleEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetManageReqHandleEntityImpl}.
 * </p>
 *
 * @author MrNet
 * @see AssetManageReqHandleEntityImpl
 * @see com.viettel.ams.core.model.AssetManageReqHandleEntity
 * @see com.viettel.ams.core.model.AssetManageReqHandleEntityModel
 * @generated
 */
@JSON(strict = true)
public class AssetManageReqHandleEntityModelImpl extends BaseModelImpl<AssetManageReqHandleEntity>
	implements AssetManageReqHandleEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset manage req handle entity model instance should use the {@link com.viettel.ams.core.model.AssetManageReqHandleEntity} interface instead.
	 */
	public static final String TABLE_NAME = "Asset_Manage_Req_Handle_Entity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "HANDLE_ID", Types.BIGINT },
			{ "MER_ENTITY_ID", Types.BIGINT },
			{ "STATUS", Types.BIGINT },
			{ "STATION_ID", Types.BIGINT },
			{ "FAIL_DATE", Types.TIMESTAMP },
			{ "FAIL_REASON", Types.VARCHAR },
			{ "USED_DATE", Types.TIMESTAMP },
			{ "HAND_OVER_ID", Types.BIGINT },
			{ "QUANTITY", Types.DOUBLE },
			{ "UNIT_PRICE", Types.DOUBLE },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "UPGRADE_PARENT_ID", Types.BIGINT },
			{ "PARENT_ID", Types.BIGINT },
			{ "GROUP_ID", Types.BIGINT },
			{ "TIME_RETRIEVE", Types.TIMESTAMP },
			{ "STATUS_ID", Types.BIGINT },
			{ "MARK", Types.BIGINT },
			{ "OLD_STATUS_ID", Types.BIGINT },
			{ "PRE_CAT_EMPLOYEE_ID", Types.BIGINT },
			{ "PERCENT_QUALITY", Types.BIGINT },
			{ "WITHDRAW_PRICE", Types.BIGINT },
			{ "DELIVERY_NOTE_ID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Asset_Manage_Req_Handle_Entity (ID LONG not null primary key,HANDLE_ID LONG,MER_ENTITY_ID LONG,STATUS LONG,STATION_ID LONG,FAIL_DATE DATE null,FAIL_REASON VARCHAR(75) null,USED_DATE DATE null,HAND_OVER_ID LONG,QUANTITY DOUBLE,UNIT_PRICE DOUBLE,DESCRIPTION VARCHAR(75) null,UPGRADE_PARENT_ID LONG,PARENT_ID LONG,GROUP_ID LONG,TIME_RETRIEVE DATE null,STATUS_ID LONG,MARK LONG,OLD_STATUS_ID LONG,PRE_CAT_EMPLOYEE_ID LONG,PERCENT_QUALITY LONG,WITHDRAW_PRICE LONG,DELIVERY_NOTE_ID LONG)";
	public static final String TABLE_SQL_DROP = "drop table Asset_Manage_Req_Handle_Entity";
	public static final String ORDER_BY_JPQL = " ORDER BY assetManageReqHandleEntity.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Asset_Manage_Req_Handle_Entity.ID ASC";
	public static final String DATA_SOURCE = "amsDataSource";
	public static final String SESSION_FACTORY = "amsSessionFactory";
	public static final String TX_MANAGER = "amsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ams.core.model.AssetManageReqHandleEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ams.core.model.AssetManageReqHandleEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetManageReqHandleEntity toModel(
		AssetManageReqHandleEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssetManageReqHandleEntity model = new AssetManageReqHandleEntityImpl();

		model.setId(soapModel.getId());
		model.setHandleId(soapModel.getHandleId());
		model.setMerEntityId(soapModel.getMerEntityId());
		model.setStatus(soapModel.getStatus());
		model.setStationId(soapModel.getStationId());
		model.setFailDate(soapModel.getFailDate());
		model.setFailReason(soapModel.getFailReason());
		model.setUsedDate(soapModel.getUsedDate());
		model.setHandOverId(soapModel.getHandOverId());
		model.setQuantity(soapModel.getQuantity());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setDescription(soapModel.getDescription());
		model.setUpgradeParentId(soapModel.getUpgradeParentId());
		model.setParentId(soapModel.getParentId());
		model.setGroupId(soapModel.getGroupId());
		model.setTimeRetrieve(soapModel.getTimeRetrieve());
		model.setStatusId(soapModel.getStatusId());
		model.setMark(soapModel.getMark());
		model.setOldStatusId(soapModel.getOldStatusId());
		model.setPreCatEmployeeId(soapModel.getPreCatEmployeeId());
		model.setPercentQuality(soapModel.getPercentQuality());
		model.setWithdrawPrice(soapModel.getWithdrawPrice());
		model.setDeliveryNoteId(soapModel.getDeliveryNoteId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetManageReqHandleEntity> toModels(
		AssetManageReqHandleEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssetManageReqHandleEntity> models = new ArrayList<AssetManageReqHandleEntity>(soapModels.length);

		for (AssetManageReqHandleEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ams.core.model.AssetManageReqHandleEntity"));

	public AssetManageReqHandleEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetManageReqHandleEntity.class;
	}

	@Override
	public String getModelClassName() {
		return AssetManageReqHandleEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("handleId", getHandleId());
		attributes.put("merEntityId", getMerEntityId());
		attributes.put("status", getStatus());
		attributes.put("stationId", getStationId());
		attributes.put("failDate", getFailDate());
		attributes.put("failReason", getFailReason());
		attributes.put("usedDate", getUsedDate());
		attributes.put("handOverId", getHandOverId());
		attributes.put("quantity", getQuantity());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("description", getDescription());
		attributes.put("upgradeParentId", getUpgradeParentId());
		attributes.put("parentId", getParentId());
		attributes.put("groupId", getGroupId());
		attributes.put("timeRetrieve", getTimeRetrieve());
		attributes.put("statusId", getStatusId());
		attributes.put("mark", getMark());
		attributes.put("oldStatusId", getOldStatusId());
		attributes.put("preCatEmployeeId", getPreCatEmployeeId());
		attributes.put("percentQuality", getPercentQuality());
		attributes.put("withdrawPrice", getWithdrawPrice());
		attributes.put("deliveryNoteId", getDeliveryNoteId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long handleId = (Long)attributes.get("handleId");

		if (handleId != null) {
			setHandleId(handleId);
		}

		Long merEntityId = (Long)attributes.get("merEntityId");

		if (merEntityId != null) {
			setMerEntityId(merEntityId);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long stationId = (Long)attributes.get("stationId");

		if (stationId != null) {
			setStationId(stationId);
		}

		Date failDate = (Date)attributes.get("failDate");

		if (failDate != null) {
			setFailDate(failDate);
		}

		String failReason = (String)attributes.get("failReason");

		if (failReason != null) {
			setFailReason(failReason);
		}

		Date usedDate = (Date)attributes.get("usedDate");

		if (usedDate != null) {
			setUsedDate(usedDate);
		}

		Long handOverId = (Long)attributes.get("handOverId");

		if (handOverId != null) {
			setHandOverId(handOverId);
		}

		Double quantity = (Double)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long upgradeParentId = (Long)attributes.get("upgradeParentId");

		if (upgradeParentId != null) {
			setUpgradeParentId(upgradeParentId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date timeRetrieve = (Date)attributes.get("timeRetrieve");

		if (timeRetrieve != null) {
			setTimeRetrieve(timeRetrieve);
		}

		Long statusId = (Long)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		Long mark = (Long)attributes.get("mark");

		if (mark != null) {
			setMark(mark);
		}

		Long oldStatusId = (Long)attributes.get("oldStatusId");

		if (oldStatusId != null) {
			setOldStatusId(oldStatusId);
		}

		Long preCatEmployeeId = (Long)attributes.get("preCatEmployeeId");

		if (preCatEmployeeId != null) {
			setPreCatEmployeeId(preCatEmployeeId);
		}

		Long percentQuality = (Long)attributes.get("percentQuality");

		if (percentQuality != null) {
			setPercentQuality(percentQuality);
		}

		Long withdrawPrice = (Long)attributes.get("withdrawPrice");

		if (withdrawPrice != null) {
			setWithdrawPrice(withdrawPrice);
		}

		Long deliveryNoteId = (Long)attributes.get("deliveryNoteId");

		if (deliveryNoteId != null) {
			setDeliveryNoteId(deliveryNoteId);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Long getHandleId() {
		return _handleId;
	}

	@Override
	public void setHandleId(Long handleId) {
		_handleId = handleId;
	}

	@JSON
	@Override
	public Long getMerEntityId() {
		return _merEntityId;
	}

	@Override
	public void setMerEntityId(Long merEntityId) {
		_merEntityId = merEntityId;
	}

	@JSON
	@Override
	public Long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(Long status) {
		_status = status;
	}

	@JSON
	@Override
	public Long getStationId() {
		return _stationId;
	}

	@Override
	public void setStationId(Long stationId) {
		_stationId = stationId;
	}

	@JSON
	@Override
	public Date getFailDate() {
		return _failDate;
	}

	@Override
	public void setFailDate(Date failDate) {
		_failDate = failDate;
	}

	@JSON
	@Override
	public String getFailReason() {
		if (_failReason == null) {
			return StringPool.BLANK;
		}
		else {
			return _failReason;
		}
	}

	@Override
	public void setFailReason(String failReason) {
		_failReason = failReason;
	}

	@JSON
	@Override
	public Date getUsedDate() {
		return _usedDate;
	}

	@Override
	public void setUsedDate(Date usedDate) {
		_usedDate = usedDate;
	}

	@JSON
	@Override
	public Long getHandOverId() {
		return _handOverId;
	}

	@Override
	public void setHandOverId(Long handOverId) {
		_handOverId = handOverId;
	}

	@JSON
	@Override
	public Double getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(Double quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public Double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(Double unitPrice) {
		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Long getUpgradeParentId() {
		return _upgradeParentId;
	}

	@Override
	public void setUpgradeParentId(Long upgradeParentId) {
		_upgradeParentId = upgradeParentId;
	}

	@JSON
	@Override
	public Long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(Long parentId) {
		_parentId = parentId;
	}

	@JSON
	@Override
	public Long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(Long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getTimeRetrieve() {
		return _timeRetrieve;
	}

	@Override
	public void setTimeRetrieve(Date timeRetrieve) {
		_timeRetrieve = timeRetrieve;
	}

	@JSON
	@Override
	public Long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(Long statusId) {
		_statusId = statusId;
	}

	@JSON
	@Override
	public Long getMark() {
		return _mark;
	}

	@Override
	public void setMark(Long mark) {
		_mark = mark;
	}

	@JSON
	@Override
	public Long getOldStatusId() {
		return _oldStatusId;
	}

	@Override
	public void setOldStatusId(Long oldStatusId) {
		_oldStatusId = oldStatusId;
	}

	@JSON
	@Override
	public Long getPreCatEmployeeId() {
		return _preCatEmployeeId;
	}

	@Override
	public void setPreCatEmployeeId(Long preCatEmployeeId) {
		_preCatEmployeeId = preCatEmployeeId;
	}

	@JSON
	@Override
	public Long getPercentQuality() {
		return _percentQuality;
	}

	@Override
	public void setPercentQuality(Long percentQuality) {
		_percentQuality = percentQuality;
	}

	@JSON
	@Override
	public Long getWithdrawPrice() {
		return _withdrawPrice;
	}

	@Override
	public void setWithdrawPrice(Long withdrawPrice) {
		_withdrawPrice = withdrawPrice;
	}

	@JSON
	@Override
	public Long getDeliveryNoteId() {
		return _deliveryNoteId;
	}

	@Override
	public void setDeliveryNoteId(Long deliveryNoteId) {
		_deliveryNoteId = deliveryNoteId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetManageReqHandleEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetManageReqHandleEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetManageReqHandleEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetManageReqHandleEntityImpl assetManageReqHandleEntityImpl = new AssetManageReqHandleEntityImpl();

		assetManageReqHandleEntityImpl.setId(getId());
		assetManageReqHandleEntityImpl.setHandleId(getHandleId());
		assetManageReqHandleEntityImpl.setMerEntityId(getMerEntityId());
		assetManageReqHandleEntityImpl.setStatus(getStatus());
		assetManageReqHandleEntityImpl.setStationId(getStationId());
		assetManageReqHandleEntityImpl.setFailDate(getFailDate());
		assetManageReqHandleEntityImpl.setFailReason(getFailReason());
		assetManageReqHandleEntityImpl.setUsedDate(getUsedDate());
		assetManageReqHandleEntityImpl.setHandOverId(getHandOverId());
		assetManageReqHandleEntityImpl.setQuantity(getQuantity());
		assetManageReqHandleEntityImpl.setUnitPrice(getUnitPrice());
		assetManageReqHandleEntityImpl.setDescription(getDescription());
		assetManageReqHandleEntityImpl.setUpgradeParentId(getUpgradeParentId());
		assetManageReqHandleEntityImpl.setParentId(getParentId());
		assetManageReqHandleEntityImpl.setGroupId(getGroupId());
		assetManageReqHandleEntityImpl.setTimeRetrieve(getTimeRetrieve());
		assetManageReqHandleEntityImpl.setStatusId(getStatusId());
		assetManageReqHandleEntityImpl.setMark(getMark());
		assetManageReqHandleEntityImpl.setOldStatusId(getOldStatusId());
		assetManageReqHandleEntityImpl.setPreCatEmployeeId(getPreCatEmployeeId());
		assetManageReqHandleEntityImpl.setPercentQuality(getPercentQuality());
		assetManageReqHandleEntityImpl.setWithdrawPrice(getWithdrawPrice());
		assetManageReqHandleEntityImpl.setDeliveryNoteId(getDeliveryNoteId());

		assetManageReqHandleEntityImpl.resetOriginalValues();

		return assetManageReqHandleEntityImpl;
	}

	@Override
	public int compareTo(AssetManageReqHandleEntity assetManageReqHandleEntity) {
		long primaryKey = assetManageReqHandleEntity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetManageReqHandleEntity)) {
			return false;
		}

		AssetManageReqHandleEntity assetManageReqHandleEntity = (AssetManageReqHandleEntity)obj;

		long primaryKey = assetManageReqHandleEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AssetManageReqHandleEntity> toCacheModel() {
		AssetManageReqHandleEntityCacheModel assetManageReqHandleEntityCacheModel =
			new AssetManageReqHandleEntityCacheModel();

		assetManageReqHandleEntityCacheModel.id = getId();

		assetManageReqHandleEntityCacheModel.handleId = getHandleId();

		assetManageReqHandleEntityCacheModel.merEntityId = getMerEntityId();

		assetManageReqHandleEntityCacheModel.status = getStatus();

		assetManageReqHandleEntityCacheModel.stationId = getStationId();

		Date failDate = getFailDate();

		if (failDate != null) {
			assetManageReqHandleEntityCacheModel.failDate = failDate.getTime();
		}
		else {
			assetManageReqHandleEntityCacheModel.failDate = Long.MIN_VALUE;
		}

		assetManageReqHandleEntityCacheModel.failReason = getFailReason();

		String failReason = assetManageReqHandleEntityCacheModel.failReason;

		if ((failReason != null) && (failReason.length() == 0)) {
			assetManageReqHandleEntityCacheModel.failReason = null;
		}

		Date usedDate = getUsedDate();

		if (usedDate != null) {
			assetManageReqHandleEntityCacheModel.usedDate = usedDate.getTime();
		}
		else {
			assetManageReqHandleEntityCacheModel.usedDate = Long.MIN_VALUE;
		}

		assetManageReqHandleEntityCacheModel.handOverId = getHandOverId();

		assetManageReqHandleEntityCacheModel.quantity = getQuantity();

		assetManageReqHandleEntityCacheModel.unitPrice = getUnitPrice();

		assetManageReqHandleEntityCacheModel.description = getDescription();

		String description = assetManageReqHandleEntityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			assetManageReqHandleEntityCacheModel.description = null;
		}

		assetManageReqHandleEntityCacheModel.upgradeParentId = getUpgradeParentId();

		assetManageReqHandleEntityCacheModel.parentId = getParentId();

		assetManageReqHandleEntityCacheModel.groupId = getGroupId();

		Date timeRetrieve = getTimeRetrieve();

		if (timeRetrieve != null) {
			assetManageReqHandleEntityCacheModel.timeRetrieve = timeRetrieve.getTime();
		}
		else {
			assetManageReqHandleEntityCacheModel.timeRetrieve = Long.MIN_VALUE;
		}

		assetManageReqHandleEntityCacheModel.statusId = getStatusId();

		assetManageReqHandleEntityCacheModel.mark = getMark();

		assetManageReqHandleEntityCacheModel.oldStatusId = getOldStatusId();

		assetManageReqHandleEntityCacheModel.preCatEmployeeId = getPreCatEmployeeId();

		assetManageReqHandleEntityCacheModel.percentQuality = getPercentQuality();

		assetManageReqHandleEntityCacheModel.withdrawPrice = getWithdrawPrice();

		assetManageReqHandleEntityCacheModel.deliveryNoteId = getDeliveryNoteId();

		return assetManageReqHandleEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", handleId=");
		sb.append(getHandleId());
		sb.append(", merEntityId=");
		sb.append(getMerEntityId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", stationId=");
		sb.append(getStationId());
		sb.append(", failDate=");
		sb.append(getFailDate());
		sb.append(", failReason=");
		sb.append(getFailReason());
		sb.append(", usedDate=");
		sb.append(getUsedDate());
		sb.append(", handOverId=");
		sb.append(getHandOverId());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", upgradeParentId=");
		sb.append(getUpgradeParentId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", timeRetrieve=");
		sb.append(getTimeRetrieve());
		sb.append(", statusId=");
		sb.append(getStatusId());
		sb.append(", mark=");
		sb.append(getMark());
		sb.append(", oldStatusId=");
		sb.append(getOldStatusId());
		sb.append(", preCatEmployeeId=");
		sb.append(getPreCatEmployeeId());
		sb.append(", percentQuality=");
		sb.append(getPercentQuality());
		sb.append(", withdrawPrice=");
		sb.append(getWithdrawPrice());
		sb.append(", deliveryNoteId=");
		sb.append(getDeliveryNoteId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ams.core.model.AssetManageReqHandleEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handleId</column-name><column-value><![CDATA[");
		sb.append(getHandleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merEntityId</column-name><column-value><![CDATA[");
		sb.append(getMerEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stationId</column-name><column-value><![CDATA[");
		sb.append(getStationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failDate</column-name><column-value><![CDATA[");
		sb.append(getFailDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failReason</column-name><column-value><![CDATA[");
		sb.append(getFailReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedDate</column-name><column-value><![CDATA[");
		sb.append(getUsedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>handOverId</column-name><column-value><![CDATA[");
		sb.append(getHandOverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upgradeParentId</column-name><column-value><![CDATA[");
		sb.append(getUpgradeParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeRetrieve</column-name><column-value><![CDATA[");
		sb.append(getTimeRetrieve());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mark</column-name><column-value><![CDATA[");
		sb.append(getMark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oldStatusId</column-name><column-value><![CDATA[");
		sb.append(getOldStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preCatEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getPreCatEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentQuality</column-name><column-value><![CDATA[");
		sb.append(getPercentQuality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>withdrawPrice</column-name><column-value><![CDATA[");
		sb.append(getWithdrawPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliveryNoteId</column-name><column-value><![CDATA[");
		sb.append(getDeliveryNoteId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssetManageReqHandleEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetManageReqHandleEntity.class
		};
	private long _id;
	private Long _handleId;
	private Long _merEntityId;
	private Long _status;
	private Long _stationId;
	private Date _failDate;
	private String _failReason;
	private Date _usedDate;
	private Long _handOverId;
	private Double _quantity;
	private Double _unitPrice;
	private String _description;
	private Long _upgradeParentId;
	private Long _parentId;
	private Long _groupId;
	private Date _timeRetrieve;
	private Long _statusId;
	private Long _mark;
	private Long _oldStatusId;
	private Long _preCatEmployeeId;
	private Long _percentQuality;
	private Long _withdrawPrice;
	private Long _deliveryNoteId;
	private AssetManageReqHandleEntity _escapedModel;
}