/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viettel.ams.core.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.ams.core.model.AssetManageReqEntity;
import com.viettel.ams.core.model.AssetManageReqEntityModel;
import com.viettel.ams.core.model.AssetManageReqEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssetManageReqEntity service. Represents a row in the &quot;Asset_Manage_Req_Entity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.ams.core.model.AssetManageReqEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetManageReqEntityImpl}.
 * </p>
 *
 * @author MrNet
 * @see AssetManageReqEntityImpl
 * @see com.viettel.ams.core.model.AssetManageReqEntity
 * @see com.viettel.ams.core.model.AssetManageReqEntityModel
 * @generated
 */
@JSON(strict = true)
public class AssetManageReqEntityModelImpl extends BaseModelImpl<AssetManageReqEntity>
	implements AssetManageReqEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset manage req entity model instance should use the {@link com.viettel.ams.core.model.AssetManageReqEntity} interface instead.
	 */
	public static final String TABLE_NAME = "Asset_Manage_Req_Entity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "REQ_ID", Types.BIGINT },
			{ "MER_ENTITY_ID", Types.BIGINT },
			{ "STATION_ID", Types.BIGINT },
			{ "FAIL_DATE", Types.TIMESTAMP },
			{ "FAIL_REASON", Types.VARCHAR },
			{ "USED_DATE", Types.TIMESTAMP },
			{ "PRE_STATUS_ID", Types.BIGINT },
			{ "GROUP_ID", Types.BIGINT },
			{ "QUANTITY", Types.DOUBLE },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "UNIT_PRICE", Types.DOUBLE },
			{ "TIME_RETRIEVE", Types.TIMESTAMP },
			{ "CONSTRUCTION_ID", Types.BIGINT },
			{ "CONDITIONER_ID", Types.BIGINT },
			{ "CAT_GROUP_MER_ID", Types.BIGINT },
			{ "UPGRADE_PARENT_ID", Types.BIGINT },
			{ "PARTNER_ID", Types.BIGINT },
			{ "DELIVERY_NOTE_ID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Asset_Manage_Req_Entity (ID LONG not null primary key,REQ_ID LONG,MER_ENTITY_ID LONG,STATION_ID LONG,FAIL_DATE DATE null,FAIL_REASON VARCHAR(75) null,USED_DATE DATE null,PRE_STATUS_ID LONG,GROUP_ID LONG,QUANTITY DOUBLE,DESCRIPTION VARCHAR(75) null,UNIT_PRICE DOUBLE,TIME_RETRIEVE DATE null,CONSTRUCTION_ID LONG,CONDITIONER_ID LONG,CAT_GROUP_MER_ID LONG,UPGRADE_PARENT_ID LONG,PARTNER_ID LONG,DELIVERY_NOTE_ID LONG)";
	public static final String TABLE_SQL_DROP = "drop table Asset_Manage_Req_Entity";
	public static final String ORDER_BY_JPQL = " ORDER BY assetManageReqEntity.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Asset_Manage_Req_Entity.ID ASC";
	public static final String DATA_SOURCE = "amsDataSource";
	public static final String SESSION_FACTORY = "amsSessionFactory";
	public static final String TX_MANAGER = "amsTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.ams.core.model.AssetManageReqEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.ams.core.model.AssetManageReqEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.ams.core.model.AssetManageReqEntity"),
			true);
	public static long REQID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetManageReqEntity toModel(
		AssetManageReqEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssetManageReqEntity model = new AssetManageReqEntityImpl();

		model.setId(soapModel.getId());
		model.setReqId(soapModel.getReqId());
		model.setMerEntityId(soapModel.getMerEntityId());
		model.setStationId(soapModel.getStationId());
		model.setFailDate(soapModel.getFailDate());
		model.setFailReason(soapModel.getFailReason());
		model.setUsedDate(soapModel.getUsedDate());
		model.setPreStatusId(soapModel.getPreStatusId());
		model.setGroupId(soapModel.getGroupId());
		model.setQuantity(soapModel.getQuantity());
		model.setDescription(soapModel.getDescription());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setTimeRetrieve(soapModel.getTimeRetrieve());
		model.setConstructionId(soapModel.getConstructionId());
		model.setConditionerId(soapModel.getConditionerId());
		model.setCatGroupMerId(soapModel.getCatGroupMerId());
		model.setUpgradeParentId(soapModel.getUpgradeParentId());
		model.setPartnerId(soapModel.getPartnerId());
		model.setDeliveryNoteId(soapModel.getDeliveryNoteId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetManageReqEntity> toModels(
		AssetManageReqEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssetManageReqEntity> models = new ArrayList<AssetManageReqEntity>(soapModels.length);

		for (AssetManageReqEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.ams.core.model.AssetManageReqEntity"));

	public AssetManageReqEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetManageReqEntity.class;
	}

	@Override
	public String getModelClassName() {
		return AssetManageReqEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("reqId", getReqId());
		attributes.put("merEntityId", getMerEntityId());
		attributes.put("stationId", getStationId());
		attributes.put("failDate", getFailDate());
		attributes.put("failReason", getFailReason());
		attributes.put("usedDate", getUsedDate());
		attributes.put("preStatusId", getPreStatusId());
		attributes.put("groupId", getGroupId());
		attributes.put("quantity", getQuantity());
		attributes.put("description", getDescription());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("timeRetrieve", getTimeRetrieve());
		attributes.put("constructionId", getConstructionId());
		attributes.put("conditionerId", getConditionerId());
		attributes.put("catGroupMerId", getCatGroupMerId());
		attributes.put("upgradeParentId", getUpgradeParentId());
		attributes.put("partnerId", getPartnerId());
		attributes.put("deliveryNoteId", getDeliveryNoteId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long reqId = (Long)attributes.get("reqId");

		if (reqId != null) {
			setReqId(reqId);
		}

		Long merEntityId = (Long)attributes.get("merEntityId");

		if (merEntityId != null) {
			setMerEntityId(merEntityId);
		}

		Long stationId = (Long)attributes.get("stationId");

		if (stationId != null) {
			setStationId(stationId);
		}

		Date failDate = (Date)attributes.get("failDate");

		if (failDate != null) {
			setFailDate(failDate);
		}

		String failReason = (String)attributes.get("failReason");

		if (failReason != null) {
			setFailReason(failReason);
		}

		Date usedDate = (Date)attributes.get("usedDate");

		if (usedDate != null) {
			setUsedDate(usedDate);
		}

		Long preStatusId = (Long)attributes.get("preStatusId");

		if (preStatusId != null) {
			setPreStatusId(preStatusId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Double quantity = (Double)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		Date timeRetrieve = (Date)attributes.get("timeRetrieve");

		if (timeRetrieve != null) {
			setTimeRetrieve(timeRetrieve);
		}

		Long constructionId = (Long)attributes.get("constructionId");

		if (constructionId != null) {
			setConstructionId(constructionId);
		}

		Long conditionerId = (Long)attributes.get("conditionerId");

		if (conditionerId != null) {
			setConditionerId(conditionerId);
		}

		Long catGroupMerId = (Long)attributes.get("catGroupMerId");

		if (catGroupMerId != null) {
			setCatGroupMerId(catGroupMerId);
		}

		Long upgradeParentId = (Long)attributes.get("upgradeParentId");

		if (upgradeParentId != null) {
			setUpgradeParentId(upgradeParentId);
		}

		Long partnerId = (Long)attributes.get("partnerId");

		if (partnerId != null) {
			setPartnerId(partnerId);
		}

		Long deliveryNoteId = (Long)attributes.get("deliveryNoteId");

		if (deliveryNoteId != null) {
			setDeliveryNoteId(deliveryNoteId);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Long getReqId() {
		return _reqId;
	}

	@Override
	public void setReqId(Long reqId) {
		_columnBitmask |= REQID_COLUMN_BITMASK;

		if (!_setOriginalReqId) {
			_setOriginalReqId = true;

			_originalReqId = _reqId;
		}

		_reqId = reqId;
	}

	public Long getOriginalReqId() {
		return _originalReqId;
	}

	@JSON
	@Override
	public Long getMerEntityId() {
		return _merEntityId;
	}

	@Override
	public void setMerEntityId(Long merEntityId) {
		_merEntityId = merEntityId;
	}

	@JSON
	@Override
	public Long getStationId() {
		return _stationId;
	}

	@Override
	public void setStationId(Long stationId) {
		_stationId = stationId;
	}

	@JSON
	@Override
	public Date getFailDate() {
		return _failDate;
	}

	@Override
	public void setFailDate(Date failDate) {
		_failDate = failDate;
	}

	@JSON
	@Override
	public String getFailReason() {
		if (_failReason == null) {
			return StringPool.BLANK;
		}
		else {
			return _failReason;
		}
	}

	@Override
	public void setFailReason(String failReason) {
		_failReason = failReason;
	}

	@JSON
	@Override
	public Date getUsedDate() {
		return _usedDate;
	}

	@Override
	public void setUsedDate(Date usedDate) {
		_usedDate = usedDate;
	}

	@JSON
	@Override
	public Long getPreStatusId() {
		return _preStatusId;
	}

	@Override
	public void setPreStatusId(Long preStatusId) {
		_preStatusId = preStatusId;
	}

	@JSON
	@Override
	public Long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(Long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Double getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(Double quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(Double unitPrice) {
		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public Date getTimeRetrieve() {
		return _timeRetrieve;
	}

	@Override
	public void setTimeRetrieve(Date timeRetrieve) {
		_timeRetrieve = timeRetrieve;
	}

	@JSON
	@Override
	public Long getConstructionId() {
		return _constructionId;
	}

	@Override
	public void setConstructionId(Long constructionId) {
		_constructionId = constructionId;
	}

	@JSON
	@Override
	public Long getConditionerId() {
		return _conditionerId;
	}

	@Override
	public void setConditionerId(Long conditionerId) {
		_conditionerId = conditionerId;
	}

	@JSON
	@Override
	public Long getCatGroupMerId() {
		return _catGroupMerId;
	}

	@Override
	public void setCatGroupMerId(Long catGroupMerId) {
		_catGroupMerId = catGroupMerId;
	}

	@JSON
	@Override
	public Long getUpgradeParentId() {
		return _upgradeParentId;
	}

	@Override
	public void setUpgradeParentId(Long upgradeParentId) {
		_upgradeParentId = upgradeParentId;
	}

	@JSON
	@Override
	public Long getPartnerId() {
		return _partnerId;
	}

	@Override
	public void setPartnerId(Long partnerId) {
		_partnerId = partnerId;
	}

	@JSON
	@Override
	public Long getDeliveryNoteId() {
		return _deliveryNoteId;
	}

	@Override
	public void setDeliveryNoteId(Long deliveryNoteId) {
		_deliveryNoteId = deliveryNoteId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetManageReqEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetManageReqEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetManageReqEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetManageReqEntityImpl assetManageReqEntityImpl = new AssetManageReqEntityImpl();

		assetManageReqEntityImpl.setId(getId());
		assetManageReqEntityImpl.setReqId(getReqId());
		assetManageReqEntityImpl.setMerEntityId(getMerEntityId());
		assetManageReqEntityImpl.setStationId(getStationId());
		assetManageReqEntityImpl.setFailDate(getFailDate());
		assetManageReqEntityImpl.setFailReason(getFailReason());
		assetManageReqEntityImpl.setUsedDate(getUsedDate());
		assetManageReqEntityImpl.setPreStatusId(getPreStatusId());
		assetManageReqEntityImpl.setGroupId(getGroupId());
		assetManageReqEntityImpl.setQuantity(getQuantity());
		assetManageReqEntityImpl.setDescription(getDescription());
		assetManageReqEntityImpl.setUnitPrice(getUnitPrice());
		assetManageReqEntityImpl.setTimeRetrieve(getTimeRetrieve());
		assetManageReqEntityImpl.setConstructionId(getConstructionId());
		assetManageReqEntityImpl.setConditionerId(getConditionerId());
		assetManageReqEntityImpl.setCatGroupMerId(getCatGroupMerId());
		assetManageReqEntityImpl.setUpgradeParentId(getUpgradeParentId());
		assetManageReqEntityImpl.setPartnerId(getPartnerId());
		assetManageReqEntityImpl.setDeliveryNoteId(getDeliveryNoteId());

		assetManageReqEntityImpl.resetOriginalValues();

		return assetManageReqEntityImpl;
	}

	@Override
	public int compareTo(AssetManageReqEntity assetManageReqEntity) {
		long primaryKey = assetManageReqEntity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetManageReqEntity)) {
			return false;
		}

		AssetManageReqEntity assetManageReqEntity = (AssetManageReqEntity)obj;

		long primaryKey = assetManageReqEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AssetManageReqEntityModelImpl assetManageReqEntityModelImpl = this;

		assetManageReqEntityModelImpl._originalReqId = assetManageReqEntityModelImpl._reqId;

		assetManageReqEntityModelImpl._setOriginalReqId = false;

		assetManageReqEntityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetManageReqEntity> toCacheModel() {
		AssetManageReqEntityCacheModel assetManageReqEntityCacheModel = new AssetManageReqEntityCacheModel();

		assetManageReqEntityCacheModel.id = getId();

		assetManageReqEntityCacheModel.reqId = getReqId();

		assetManageReqEntityCacheModel.merEntityId = getMerEntityId();

		assetManageReqEntityCacheModel.stationId = getStationId();

		Date failDate = getFailDate();

		if (failDate != null) {
			assetManageReqEntityCacheModel.failDate = failDate.getTime();
		}
		else {
			assetManageReqEntityCacheModel.failDate = Long.MIN_VALUE;
		}

		assetManageReqEntityCacheModel.failReason = getFailReason();

		String failReason = assetManageReqEntityCacheModel.failReason;

		if ((failReason != null) && (failReason.length() == 0)) {
			assetManageReqEntityCacheModel.failReason = null;
		}

		Date usedDate = getUsedDate();

		if (usedDate != null) {
			assetManageReqEntityCacheModel.usedDate = usedDate.getTime();
		}
		else {
			assetManageReqEntityCacheModel.usedDate = Long.MIN_VALUE;
		}

		assetManageReqEntityCacheModel.preStatusId = getPreStatusId();

		assetManageReqEntityCacheModel.groupId = getGroupId();

		assetManageReqEntityCacheModel.quantity = getQuantity();

		assetManageReqEntityCacheModel.description = getDescription();

		String description = assetManageReqEntityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			assetManageReqEntityCacheModel.description = null;
		}

		assetManageReqEntityCacheModel.unitPrice = getUnitPrice();

		Date timeRetrieve = getTimeRetrieve();

		if (timeRetrieve != null) {
			assetManageReqEntityCacheModel.timeRetrieve = timeRetrieve.getTime();
		}
		else {
			assetManageReqEntityCacheModel.timeRetrieve = Long.MIN_VALUE;
		}

		assetManageReqEntityCacheModel.constructionId = getConstructionId();

		assetManageReqEntityCacheModel.conditionerId = getConditionerId();

		assetManageReqEntityCacheModel.catGroupMerId = getCatGroupMerId();

		assetManageReqEntityCacheModel.upgradeParentId = getUpgradeParentId();

		assetManageReqEntityCacheModel.partnerId = getPartnerId();

		assetManageReqEntityCacheModel.deliveryNoteId = getDeliveryNoteId();

		return assetManageReqEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", reqId=");
		sb.append(getReqId());
		sb.append(", merEntityId=");
		sb.append(getMerEntityId());
		sb.append(", stationId=");
		sb.append(getStationId());
		sb.append(", failDate=");
		sb.append(getFailDate());
		sb.append(", failReason=");
		sb.append(getFailReason());
		sb.append(", usedDate=");
		sb.append(getUsedDate());
		sb.append(", preStatusId=");
		sb.append(getPreStatusId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", timeRetrieve=");
		sb.append(getTimeRetrieve());
		sb.append(", constructionId=");
		sb.append(getConstructionId());
		sb.append(", conditionerId=");
		sb.append(getConditionerId());
		sb.append(", catGroupMerId=");
		sb.append(getCatGroupMerId());
		sb.append(", upgradeParentId=");
		sb.append(getUpgradeParentId());
		sb.append(", partnerId=");
		sb.append(getPartnerId());
		sb.append(", deliveryNoteId=");
		sb.append(getDeliveryNoteId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.viettel.ams.core.model.AssetManageReqEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reqId</column-name><column-value><![CDATA[");
		sb.append(getReqId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merEntityId</column-name><column-value><![CDATA[");
		sb.append(getMerEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stationId</column-name><column-value><![CDATA[");
		sb.append(getStationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failDate</column-name><column-value><![CDATA[");
		sb.append(getFailDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failReason</column-name><column-value><![CDATA[");
		sb.append(getFailReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usedDate</column-name><column-value><![CDATA[");
		sb.append(getUsedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preStatusId</column-name><column-value><![CDATA[");
		sb.append(getPreStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeRetrieve</column-name><column-value><![CDATA[");
		sb.append(getTimeRetrieve());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionId</column-name><column-value><![CDATA[");
		sb.append(getConstructionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conditionerId</column-name><column-value><![CDATA[");
		sb.append(getConditionerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catGroupMerId</column-name><column-value><![CDATA[");
		sb.append(getCatGroupMerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upgradeParentId</column-name><column-value><![CDATA[");
		sb.append(getUpgradeParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partnerId</column-name><column-value><![CDATA[");
		sb.append(getPartnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliveryNoteId</column-name><column-value><![CDATA[");
		sb.append(getDeliveryNoteId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssetManageReqEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetManageReqEntity.class
		};
	private long _id;
	private Long _reqId;
	private Long _originalReqId;
	private boolean _setOriginalReqId;
	private Long _merEntityId;
	private Long _stationId;
	private Date _failDate;
	private String _failReason;
	private Date _usedDate;
	private Long _preStatusId;
	private Long _groupId;
	private Double _quantity;
	private String _description;
	private Double _unitPrice;
	private Date _timeRetrieve;
	private Long _constructionId;
	private Long _conditionerId;
	private Long _catGroupMerId;
	private Long _upgradeParentId;
	private Long _partnerId;
	private Long _deliveryNoteId;
	private long _columnBitmask;
	private AssetManageReqEntity _escapedModel;
}